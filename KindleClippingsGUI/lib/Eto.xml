<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eto</name>
    </assembly>
    <members>
        <member name="T:Eto.IColumnItem">
            <summary>
            Interface to provide a source for the <see cref="T:Eto.ColumnBinding"/>
            </summary>
        </member>
        <member name="M:Eto.IColumnItem.GetValue(System.Int32)">
            <summary>
            Gets the value from this item for the specified column/index
            </summary>
            <param name="column">column/index to get the value</param>
            <returns>value of the object with the specified column/index</returns>
        </member>
        <member name="M:Eto.IColumnItem.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value of this object for the specified column/index
            </summary>
            <param name="column">column/index to set the value</param>
            <param name="value">value to set at the specified column/index</param>
        </member>
        <member name="T:Eto.ColumnBinding">
            <summary>
            Column/Index binding for objects implementing <see cref="T:Eto.IColumnItem"/> or <see cref="T:System.Collections.IList"/>
            </summary>
            <remarks>
            This binding is an indirect binding on a particular column/index of each object.
            This is used to get/set values of a passed-in object to the <see cref="M:Eto.IndirectBinding.GetValue(System.Object)"/> and
            <see cref="M:Eto.IndirectBinding.SetValue(System.Object,System.Object)"/>.
            </remarks>
        </member>
        <member name="T:Eto.IndirectBinding">
            <summary>
            Provides an indirect binding to an indeterminate source/destination
            </summary>
            <remarks>
            This binding does not directly bind to an object - you must pass the
            object to get/set the value.  The <see cref="T:Eto.DirectBinding"/> differs in 
            that it binds directly to an object.
            
            The IndirectBinding is useful when you want to use the same binding on multiple
            objects, such as when binding cells in a <see cref="T:Eto.Forms.Grid"/>.
            
            Typically one would use <see cref="T:Eto.PropertyBinding"/> or <see cref="T:Eto.ColumnBinding"/>
            which are ways to retrieve either a property value or column/index-based value.
            </remarks>
        </member>
        <member name="T:Eto.Binding">
            <summary>
            Base class for binding between a value and another
            </summary>
            <remarks>
            This is the base of any type of binding.  Some bindings may only be used to get/set a single
            value (e.g. <see cref="T:Eto.IndirectBinding"/>), whereas the <see cref="T:Eto.DualBinding"/> can link
            two objects' values together
            </remarks>
        </member>
        <member name="M:Eto.Binding.OnChanging(Eto.BindingChangingEventArgs)">
            <summary>
            Handles the <see cref="E:Eto.Binding.Changing"/> event
            </summary>
        </member>
        <member name="M:Eto.Binding.OnChanged(Eto.BindingChangedEventArgs)">
            <summary>
            Handles the <see cref="E:Eto.Binding.Changed"/> event
            </summary>
        </member>
        <member name="M:Eto.Binding.Unbind">
            <summary>
            Unbind this from the target object(s)
            </summary>
            <remarks>
            Typically a binding may handle an event for when the target object(s) property values
            are changed.  This is called to unbind the binding from the objects so that they can be
            garbage collected
            </remarks>
        </member>
        <member name="M:Eto.Binding.Update">
            <summary>
            Updates the bound target object's value
            </summary>
        </member>
        <member name="M:Eto.Binding.HandleEvent(System.String)">
            <summary>
            Called to handle an event for this binding
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Eto.Binding.RemoveEvent(System.String)">
            <summary>
            Called to remove an event for this binding
            </summary>
            <param name="id"></param>
        </member>
        <member name="E:Eto.Binding.Changing">
            <summary>
            Event to handle when the value is being set using this binding
            </summary>
            <remarks>
            This can be used to stop a value being updated based on custom logic
            </remarks>
        </member>
        <member name="E:Eto.Binding.Changed">
            <summary>
            Event to handle after the value has been set using this binding
            </summary>
        </member>
        <member name="M:Eto.IndirectBinding.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object using this binding
            </summary>
            <remarks>
            When values are needed from this binding, this method will be called.
            Implementors of this binding would implement logic in <see cref="M:Eto.IndirectBinding.InternalGetValue(System.Object)"/>
            </remarks>
            <param name="dataItem">object to retrieve the value from</param>
            <returns>value from the specified object</returns>
        </member>
        <member name="M:Eto.IndirectBinding.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value to an object using this binding
            </summary>
            <remarks>
            This is called to set the value to the object. Implementors of this binding
            woulc implement logic in <see cref="M:Eto.IndirectBinding.InternalSetValue(System.Object,System.Object)"/>.
            </remarks>
            <param name="dataItem">object to set the value to</param>
            <param name="value">value to set to the object</param>
        </member>
        <member name="M:Eto.IndirectBinding.InternalGetValue(System.Object)">
            <summary>
            Implements the logic to get the value from the specified object
            </summary>
            <remarks>
            Implementors of this binding must implement this method to get the value from the specified object
            </remarks>
            <param name="dataItem">object to get the value from</param>
            <returns>value from this binding of the specified object</returns>
        </member>
        <member name="M:Eto.IndirectBinding.InternalSetValue(System.Object,System.Object)">
            <summary>
            Implements the logic to set the value to the specified object
            </summary>
            <param name="dataItem">object to set the value to</param>
            <param name="value">value to set on the dataItem for this binding</param>
        </member>
        <member name="M:Eto.IndirectBinding.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Adds a handler to trap when the value of this binding changes for the specified object
            </summary>
            <remarks>
            This is used to wire up events (or other mechanisms) to detect if the value is changed for a particular
            object.
            
            This is typically used to fire the <see cref="E:Eto.DirectBinding.DataValueChanged"/> event (which is wired up automatically)
            </remarks>
            <param name="dataItem">object to hook up the value changed event for</param>
            <param name="handler">handler for when the value of this binding changes for the specified object</param>
            <returns>object to track the changed handler (must be passed to <see cref="M:Eto.IndirectBinding.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> to remove)</returns>
        </member>
        <member name="M:Eto.IndirectBinding.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Removes the handler for the specified reference from <see cref="M:Eto.IndirectBinding.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/>
            </summary>
            <param name="bindingReference">Reference from the call to <see cref="M:Eto.IndirectBinding.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/></param>
            <param name="handler">Same handler that was set up during the <see cref="M:Eto.IndirectBinding.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> call</param>
        </member>
        <member name="M:Eto.ColumnBinding.#ctor">
            <summary>
            Initializes a new instance of the ColumnBinding class
            </summary>
        </member>
        <member name="M:Eto.ColumnBinding.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ColumnBinding class with the specified column
            </summary>
            <param name="column">column/index to get/set the value from each object</param>
        </member>
        <member name="M:Eto.ColumnBinding.InternalGetValue(System.Object)">
            <summary>
            Implements the logic to get the value from the specified object
            </summary>
            <param name="dataItem">object to get the value from</param>
            <returns>value at the <see cref="P:Eto.ColumnBinding.Column"/> of the specified object</returns>
        </member>
        <member name="M:Eto.ColumnBinding.InternalSetValue(System.Object,System.Object)">
            <summary>
            Implements the logic to set the value to the specified object
            </summary>
            <param name="dataItem">object to set the value</param>
            <param name="value">value to set at the <see cref="P:Eto.ColumnBinding.Column"/> of the specified object</param>
        </member>
        <member name="P:Eto.ColumnBinding.Column">
            <summary>
            Gets or sets the column the binding will get/set the value
            </summary>
        </member>
        <member name="T:Eto.Drawing.Colors">
            <summary>
            List of common colors
            </summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Transparent">
            <summary>Gets a color with an ARGB value of #</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.IndianRed">
            <summary>Gets a color with an ARGB value of #FFCD5C5C</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightCoral">
            <summary>Gets a color with an ARGB value of #FFF08080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Salmon">
            <summary>Gets a color with an ARGB value of #FFFA8072</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkSalmon">
            <summary>Gets a color with an ARGB value of #FFE9967A</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSalmon">
            <summary>Gets a color with an ARGB value of #FFFFA07A</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Red">
            <summary>Gets a color with an ARGB value of #FFFF0000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Crimson">
            <summary>Gets a color with an ARGB value of #FFDC143C</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.FireBrick">
            <summary>Gets a color with an ARGB value of #FFB22222</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkRed">
            <summary>Gets a color with an ARGB value of #FF8B0000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Pink">
            <summary>Gets a color with an ARGB value of #FFFFC0CB</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightPink">
            <summary>Gets a color with an ARGB value of #FFFFB6C1</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.HotPink">
            <summary>Gets a color with an ARGB value of #FFFF69B4</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DeepPink">
            <summary>Gets a color with an ARGB value of #FFFF1493</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumVioletRed">
            <summary>Gets a color with an ARGB value of #FFC71585</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PaleVioletRed">
            <summary>Gets a color with an ARGB value of #FFDB7093</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Coral">
            <summary>Gets a color with an ARGB value of #FFFF7F50</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Tomato">
            <summary>Gets a color with an ARGB value of #FFFF6347</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.OrangeRed">
            <summary>Gets a color with an ARGB value of #FFFF4500</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkOrange">
            <summary>Gets a color with an ARGB value of #FFFF8C00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Orange">
            <summary>Gets a color with an ARGB value of #FFFFA500</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Gold">
            <summary>Gets a color with an ARGB value of #FFFFD700</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Yellow">
            <summary>Gets a color with an ARGB value of #FFFFFF00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightYellow">
            <summary>Gets a color with an ARGB value of #FFFFFFE0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LemonChiffon">
            <summary>Gets a color with an ARGB value of #FFFFFACD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightGoldenrodYellow">
            <summary>Gets a color with an ARGB value of #FFFAFAD2</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PapayaWhip">
            <summary>Gets a color with an ARGB value of #FFFFEFD5</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Moccasin">
            <summary>Gets a color with an ARGB value of #FFFFE4B5</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PeachPuff">
            <summary>Gets a color with an ARGB value of #FFFFDAB9</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PaleGoldenrod">
            <summary>Gets a color with an ARGB value of #FFEEE8AA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Khaki">
            <summary>Gets a color with an ARGB value of #FFF0E68C</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkKhaki">
            <summary>Gets a color with an ARGB value of #FFBDB76B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Lavender">
            <summary>Gets a color with an ARGB value of #FFE6E6FA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Thistle">
            <summary>Gets a color with an ARGB value of #FFD8BFD8</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Plum">
            <summary>Gets a color with an ARGB value of #FFDDA0DD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Violet">
            <summary>Gets a color with an ARGB value of #FFEE82EE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Orchid">
            <summary>Gets a color with an ARGB value of #FFDA70D6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Fuchsia">
            <summary>Gets a color with an ARGB value of #FFFF00FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Magenta">
            <summary>Gets a color with an ARGB value of #FFFF00FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumOrchid">
            <summary>Gets a color with an ARGB value of #FFBA55D3</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumPurple">
            <summary>Gets a color with an ARGB value of #FF9370DB</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.BlueViolet">
            <summary>Gets a color with an ARGB value of #FF8A2BE2</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkViolet">
            <summary>Gets a color with an ARGB value of #FF9400D3</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkOrchid">
            <summary>Gets a color with an ARGB value of #FF9932CC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkMagenta">
            <summary>Gets a color with an ARGB value of #FF8B008B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Purple">
            <summary>Gets a color with an ARGB value of #FF800080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Indigo">
            <summary>Gets a color with an ARGB value of #FF4B0082</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkSlateBlue">
            <summary>Gets a color with an ARGB value of #FF483D8B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SlateBlue">
            <summary>Gets a color with an ARGB value of #FF6A5ACD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumSlateBlue">
            <summary>Gets a color with an ARGB value of #FF7B68EE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.GreenYellow">
            <summary>Gets a color with an ARGB value of #FFADFF2F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Chartreuse">
            <summary>Gets a color with an ARGB value of #FF7FFF00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LawnGreen">
            <summary>Gets a color with an ARGB value of #FF7CFC00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Lime">
            <summary>Gets a color with an ARGB value of #FF00FF00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LimeGreen">
            <summary>Gets a color with an ARGB value of #FF32CD32</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PaleGreen">
            <summary>Gets a color with an ARGB value of #FF98FB98</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightGreen">
            <summary>Gets a color with an ARGB value of #FF90EE90</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumSpringGreen">
            <summary>Gets a color with an ARGB value of #FF00FA9A</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SpringGreen">
            <summary>Gets a color with an ARGB value of #FF00FF7F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumSeaGreen">
            <summary>Gets a color with an ARGB value of #FF3CB371</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SeaGreen">
            <summary>Gets a color with an ARGB value of #FF2E8B57</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.ForestGreen">
            <summary>Gets a color with an ARGB value of #FF228B22</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Green">
            <summary>Gets a color with an ARGB value of #FF008000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkGreen">
            <summary>Gets a color with an ARGB value of #FF006400</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.YellowGreen">
            <summary>Gets a color with an ARGB value of #FF9ACD32</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.OliveDrab">
            <summary>Gets a color with an ARGB value of #FF6B8E23</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Olive">
            <summary>Gets a color with an ARGB value of #FF808000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkOliveGreen">
            <summary>Gets a color with an ARGB value of #FF556B2F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumAquamarine">
            <summary>Gets a color with an ARGB value of #FF66CDAA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkSeaGreen">
            <summary>Gets a color with an ARGB value of #FF8FBC8F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSeaGreen">
            <summary>Gets a color with an ARGB value of #FF20B2AA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkCyan">
            <summary>Gets a color with an ARGB value of #FF008B8B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Teal">
            <summary>Gets a color with an ARGB value of #FF008080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Aqua">
            <summary>Gets a color with an ARGB value of #FF00FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Cyan">
            <summary>Gets a color with an ARGB value of #FF00FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightCyan">
            <summary>Gets a color with an ARGB value of #FFE0FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PaleTurquoise">
            <summary>Gets a color with an ARGB value of #FFAFEEEE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Aquamarine">
            <summary>Gets a color with an ARGB value of #FF7FFFD4</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Turquoise">
            <summary>Gets a color with an ARGB value of #FF40E0D0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumTurquoise">
            <summary>Gets a color with an ARGB value of #FF48D1CC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkTurquoise">
            <summary>Gets a color with an ARGB value of #FF00CED1</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.CadetBlue">
            <summary>Gets a color with an ARGB value of #FF5F9EA0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SteelBlue">
            <summary>Gets a color with an ARGB value of #FF4682B4</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSteelBlue">
            <summary>Gets a color with an ARGB value of #FFB0C4DE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PowderBlue">
            <summary>Gets a color with an ARGB value of #FFB0E0E6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightBlue">
            <summary>Gets a color with an ARGB value of #FFADD8E6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SkyBlue">
            <summary>Gets a color with an ARGB value of #FF87CEEB</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSkyBlue">
            <summary>Gets a color with an ARGB value of #FF87CEFA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DeepSkyBlue">
            <summary>Gets a color with an ARGB value of #FF00BFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DodgerBlue">
            <summary>Gets a color with an ARGB value of #FF1E90FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.CornflowerBlue">
            <summary>Gets a color with an ARGB value of #FF6495ED</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.RoyalBlue">
            <summary>Gets a color with an ARGB value of #FF4169E1</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Blue">
            <summary>Gets a color with an ARGB value of #FF0000FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumBlue">
            <summary>Gets a color with an ARGB value of #FF0000CD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkBlue">
            <summary>Gets a color with an ARGB value of #FF00008B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Navy">
            <summary>Gets a color with an ARGB value of #FF000080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MidnightBlue">
            <summary>Gets a color with an ARGB value of #FF191970</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Cornsilk">
            <summary>Gets a color with an ARGB value of #FFFFF8DC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.BlanchedAlmond">
            <summary>Gets a color with an ARGB value of #FFFFEBCD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Bisque">
            <summary>Gets a color with an ARGB value of #FFFFE4C4</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.NavajoWhite">
            <summary>Gets a color with an ARGB value of #FFFFDEAD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Wheat">
            <summary>Gets a color with an ARGB value of #FFF5DEB3</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.BurlyWood">
            <summary>Gets a color with an ARGB value of #FFDEB887</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Tan">
            <summary>Gets a color with an ARGB value of #FFD2B48C</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.RosyBrown">
            <summary>Gets a color with an ARGB value of #FFBC8F8F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SandyBrown">
            <summary>Gets a color with an ARGB value of #FFF4A460</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Goldenrod">
            <summary>Gets a color with an ARGB value of #FFDAA520</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkGoldenrod">
            <summary>Gets a color with an ARGB value of #FFB8860B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Peru">
            <summary>Gets a color with an ARGB value of #FFCD853F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Chocolate">
            <summary>Gets a color with an ARGB value of #FFD2691E</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SaddleBrown">
            <summary>Gets a color with an ARGB value of #FF8B4513</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Sienna">
            <summary>Gets a color with an ARGB value of #FFA0522D</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Brown">
            <summary>Gets a color with an ARGB value of #FFA52A2A</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Maroon">
            <summary>Gets a color with an ARGB value of #FF800000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.White">
            <summary>Gets a color with an ARGB value of #FFFFFFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Snow">
            <summary>Gets a color with an ARGB value of #FFFFFAFA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Honeydew">
            <summary>Gets a color with an ARGB value of #FFF0FFF0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MintCream">
            <summary>Gets a color with an ARGB value of #FFF5FFFA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Azure">
            <summary>Gets a color with an ARGB value of #FFF0FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.AliceBlue">
            <summary>Gets a color with an ARGB value of #FFF0F8FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.GhostWhite">
            <summary>Gets a color with an ARGB value of #FFF8F8FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.WhiteSmoke">
            <summary>Gets a color with an ARGB value of #FFF5F5F5</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Seashell">
            <summary>Gets a color with an ARGB value of #FFFFF5EE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Beige">
            <summary>Gets a color with an ARGB value of #FFF5F5DC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.OldLace">
            <summary>Gets a color with an ARGB value of #FFFDF5E6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.FloralWhite">
            <summary>Gets a color with an ARGB value of #FFFFFAF0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Ivory">
            <summary>Gets a color with an ARGB value of #FFFFFFF0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.AntiqueWhite">
            <summary>Gets a color with an ARGB value of #FFFAEBD7</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Linen">
            <summary>Gets a color with an ARGB value of #FFFAF0E6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LavenderBlush">
            <summary>Gets a color with an ARGB value of #FFFFF0F5</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MistyRose">
            <summary>Gets a color with an ARGB value of #FFFFE4E1</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Gainsboro">
            <summary>Gets a color with an ARGB value of #FFDCDCDC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightGrey">
            <summary>Gets a color with an ARGB value of #FFD3D3D3</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Silver">
            <summary>Gets a color with an ARGB value of #FFC0C0C0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkGray">
            <summary>Gets a color with an ARGB value of #FFA9A9A9</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Gray">
            <summary>Gets a color with an ARGB value of #FF808080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DimGray">
            <summary>Gets a color with an ARGB value of #FF696969</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSlateGray">
            <summary>Gets a color with an ARGB value of #FF778899</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SlateGray">
            <summary>Gets a color with an ARGB value of #FF708090</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkSlateGray">
            <summary>Gets a color with an ARGB value of #FF2F4F4F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Black">
            <summary>Gets a color with an ARGB value of #FF000000</summary>
        </member>
        <member name="T:Eto.Drawing.IRegion">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.Region"/> class
            </summary>
        </member>
        <member name="T:Eto.IInstanceWidget">
            <summary>
            Handler implementation for the <see cref="T:Eto.InstanceWidget"/>
            </summary>
        </member>
        <member name="T:Eto.IWidget">
            <summary>
            Handler interface for the <see cref="P:Eto.IWidget.Widget"/> class
            </summary>
        </member>
        <member name="M:Eto.IWidget.Initialize">
            <summary>
            Initializes the widget after it has been constructed
            </summary>
            <remarks>
            This is typically called automatically when passing the initialize value to 
            a constructor of the widget to true.
            
            For widget implementors, if you have any constructor code that must be called before Initialize
            is called on the widget handler, then you would pass false to the constructor's initialize parameter,
            then call this manually (via <see cref="M:Widget.Initialize()"/>
            </remarks>
        </member>
        <member name="P:Eto.IWidget.Widget">
            <summary>
            Gets the widget this handler is implemented for
            </summary>
        </member>
        <member name="M:Eto.IInstanceWidget.HandleEvent(System.String)">
            <summary>
            Called to handle a specific event
            </summary>
            <remarks>
            Most events are late bound by this method. Instead of wiring all events, this
            will be called with an event string that is defined by the control.
            
            This is called automatically when attaching to events, but must be called manually
            when users of the control only override the event's On... method.
            </remarks>
            <param name="id">ID of the event to handle</param>
        </member>
        <member name="P:Eto.IInstanceWidget.ID">
            <summary>
            Gets or sets an ID for the widget
            </summary>
            <remarks>
            Some platforms may use this to identify controls (e.g. web)
            </remarks>
        </member>
        <member name="P:Eto.IInstanceWidget.ControlObject">
            <summary>
            Gets the instance of the platform-specific object
            </summary>
        </member>
        <member name="M:Eto.Drawing.IRegion.Exclude(Eto.Drawing.Rectangle)">
            <summary>
            Excludes the specified <paramref name="rectangle"/> from the region
            </summary>
            <param name="rectangle">Rectangle to exclude</param>
        </member>
        <member name="M:Eto.Drawing.IRegion.Reset">
            <summary>
            Resets the region
            </summary>
        </member>
        <member name="M:Eto.Drawing.IRegion.Set(Eto.Drawing.Rectangle)">
            <summary>
            Sets the specified <paramref name="rectangle"/> in the region
            </summary>
            <param name="rectangle">Rectangle to set the region to</param>
        </member>
        <member name="T:Eto.Drawing.Region">
            <summary>
            Defines a region to use for clipping
            </summary>
            <seealso cref="P:Eto.Drawing.Graphics.ClipRegion"/>
        </member>
        <member name="T:Eto.InstanceWidget">
            <summary>
            Widget that represents an instance of an object
            </summary>
            <remarks>
            The InstanceWidget is used for controls and objects that represent an instance of an object.
            
            Typically, most widgets will derive from this class. However, if you only have static methods of a class
            you will still need a handler implementation and the <see cref="T:Eto.Widget"/> class provides that.
            
            InstanceWidgets also wrap the ability to handle late-bound events on the backend control.
            </remarks>
        </member>
        <member name="T:Eto.Widget">
             <summary>
             Base widget class for all objects requiring a platform-specific implementation
             </summary>
             <remarks>
             The Widget is the base of all abstracted objects that have platform-specific implementations.
            
             The <see cref="T:Eto.InstanceWidget"/> is the class that's typically used as a base as it provides
             an instance of the platform-specific object, as well as adds the ability to handle events
             on the object.  This is used as the base for static objects such as the <see cref="T:Eto.Forms.MessageBox"/>
             or <see cref="T:Eto.EtoEnvironment"/>.
             
             To implement the handler for a widget, use the <see cref="T:Eto.WidgetHandler`1"/> as the base class.
             </remarks>
        </member>
        <member name="M:Eto.Widget.Finalize">
            <summary>
            Finalizes this widget
            </summary>
        </member>
        <member name="M:Eto.Widget.#ctor(Eto.Generator,Eto.IWidget,System.Boolean)">
            <summary>
            Initializes a new instance of the Widget class
            </summary>
            <param name="generator">Generator the widget handler was created with</param>
            <param name="handler">Handler to assign to this widget for its implementation</param>
            <param name="initialize">True to initialize the widget, false to defer that to the caller</param>
        </member>
        <member name="M:Eto.Widget.#ctor(Eto.Generator,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the Widget class
            </summary>
            <param name="generator">Generator the widget handler was created with</param>
            <param name="type">Type of widget handler to create from the generator for this widget</param>
            <param name="initialize">True to initialize the widget, false to defer that to the caller</param>
        </member>
        <member name="M:Eto.Widget.Initialize">
            <summary>
            Initializes the widget handler
            </summary>
            <remarks>
            This is typically called from the constructor after all of the logic is completed to construct
            the object.
            
            If you pass false to the constructor's initialize property, you should call this manually in your constructor
            after all of its logic has finished.
            </remarks>
        </member>
        <member name="M:Eto.Widget.Dispose">
            <summary>
            Disposes of this widget, supressing the finalizer
            </summary>
        </member>
        <member name="M:Eto.Widget.Unbind">
            <summary>
            Unbinds any bindings in the <see cref="P:Eto.Widget.Bindings"/> collection and removes the bindings
            </summary>
        </member>
        <member name="M:Eto.Widget.UpdateBindings">
            <summary>
            Updates all bindings in this widget
            </summary>
        </member>
        <member name="M:Eto.Widget.Dispose(System.Boolean)">
            <summary>
            Handles the disposal of this widget
            </summary>
            <param name="disposing">True if the caller called <see cref="M:Eto.Widget.Dispose"/> manually, false if this is called from the finalizer</param>
        </member>
        <member name="P:Eto.Widget.Properties">
            <summary>
            Gets the attached properties for this widget
            </summary>
        </member>
        <member name="P:Eto.Widget.Generator">
            <summary>
            Gets the generator that was used to create the <see cref="P:Eto.Widget.Handler"/> for this widget
            </summary>
            <remarks>
            The generator is typically either passed to the constructor of the control, or the
            <see cref="P:Generator.Current"/> is used.
            </remarks>
        </member>
        <member name="P:Eto.Widget.Bindings">
            <summary>
            Gets the collection of bindings that are attached to this widget
            </summary>
        </member>
        <member name="P:Eto.Widget.Tag">
            <summary>
            Gets or sets a user-defined object that contains data about the control
            </summary>
            <remarks>
            A common use of the tag property is to store data that is associated with the control that you can later
            retrieve.
            </remarks>
        </member>
        <member name="P:Eto.Widget.Handler">
            <summary>
            Gets the platform-specific handler for this widget
            </summary>
        </member>
        <member name="M:Eto.InstanceWidget.OnDataContextChanged(System.EventArgs)">
            <summary>
            Called to fire the <see cref="E:Eto.InstanceWidget.DataContextChanged"/> event
            </summary>
            <remarks>
            Implementors may override this to fire this event on child widgets in a heirarchy. 
            This allows a control to be bound to its own <see cref="P:Eto.InstanceWidget.DataContext"/>, which would be set
            on one of the parent control(s).
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.InstanceWidget.OnStyleChanged(System.EventArgs)">
            <summary>
            Handles the <see cref="E:Eto.InstanceWidget.StyleChanged"/> event
            </summary>
        </member>
        <member name="M:Eto.InstanceWidget.#ctor(Eto.Generator,Eto.IWidget,System.Boolean)">
            <summary>
            Initializes a new instance of the InstanceWidget with the specified handler
            </summary>
            <param name="generator">Generator for the widget</param>
            <param name="handler">Pre-created handler to attach to this instance</param>
            <param name="initialize">True to call handler's Initialze method, false otherwise</param>
        </member>
        <member name="M:Eto.InstanceWidget.#ctor(Eto.Generator,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the InstanceWidget with the specified handler type
            </summary>
            <param name="generator">Generator for the widget</param>
            <param name="handlerType">Type of the handler to create as the backend for this widget</param>
            <param name="initialize">True to call handler's Initialze method, false otherwise</param>
        </member>
        <member name="M:Eto.InstanceWidget.HandleEvent(System.String)">
            <summary>
            Attaches the specified late-bound event to the control to be handled
            </summary>
            <remarks>
            This needs to be called when you want to override the On... methods instead of attaching 
            to the associated event.
            </remarks>
            <example>
            <code><![CDATA[
            // this will call HandleEvent automatically
            var textBox = new TextBox ();
            textBox.TextChanged += MyTextChangedHandler;
            
            // must call HandleEvent when overriding OnTextChanged
            public class MyTextBox : TextBox
            {
            	public MyTextBox()
            	{
            		HandleEvent (TextChangedEvent);
            	}
            	
            	protected override void OnTextChanged (EventArgs e)
            	{
            		// your logic
            	}
            }
            
            ]]></code>
            </example>
            <param name="id">ID of the event to handle.  Usually a constant in the form of [Control].[EventName]Event (e.g. TextBox.TextChangedEvent)</param>
        </member>
        <member name="M:Eto.InstanceWidget.HandleEvent(System.String[])">
            <summary>
            Attaches the specified late-bound event(s) to the control to be handled
            </summary>
            <remarks>
            This needs to be called when you want to override the On... methods instead of attaching 
            to the associated event.
            </remarks>
            <example>
            Example of how to HandleEvent automatically
            <code><![CDATA[
            // 
            var textBox = new TextBox ();
            textBox.TextChanged += MyTextChangedHandler;
            textBox.SizeChanged += MySizeChangedHandler;
            ]]></code>
            
            Example of when you must call HandleEvent when overriding OnTextChanged
            <code><![CDATA[
            public class MyTextBox : TextBox
            {
            	public MyTextBox()
            	{
            		HandleEvent (TextChangedEvent, SizeChangedEvent);
            	}
            	
            	protected override void OnTextChanged (EventArgs e)
            	{
            		// your logic
            	}
            	
            	protected override void OnSizeChanged (EventArgs e)
            	{
            		// more logic
            	}
            }
            ]]></code>
            </example>
            <param name="ids">ID of the event to handle.  Usually a constant in the form of [Control].[EventName]Event (e.g. TextBox.TextChangedEvent)</param>
        </member>
        <member name="M:Eto.InstanceWidget.Initialize">
            <summary>
            Initializes the widget handler
            </summary>
            <remarks>
            This is typically called from the constructor after all of the logic is completed to construct
            the object.
            
            If you pass false to the constructor's initialize property, you should call this manually in your constructor
            after all of its logic has finished.
            </remarks>
        </member>
        <member name="P:Eto.InstanceWidget.ID">
            <summary>
            Gets or sets the ID of this widget
            </summary>
        </member>
        <member name="P:Eto.InstanceWidget.Style">
            <summary>
            Gets or sets the style of this widget
            </summary>
            <remarks>
            Styles allow you to attach custom platform-specific logic to a widget.
            In your platform-specific assembly, use <see cref="M:Style.Add{H}(string, StyleHandler{H})"/>
            to add the style logic with the same id.
            </remarks>
            <example>
            <code><![CDATA[
            // in your UI
            var control = new Button { Style = "mystyle" };
            
            // in your platform assembly
            using Eto.Platform.Mac.Forms.Controls;
            
            Styles.AddHandler<ButtonHandler>("mystyle", handler => {
            	// this is where you can use handler.Control to set properties, handle events, etc.
            	handler.Control.BezelStyle = NSBezelStyle.SmallSquare;
            });
            ]]></code>
            </example>
        </member>
        <member name="E:Eto.InstanceWidget.DataContextChanged">
            <summary>
            Event to handle when the <see cref="P:Eto.InstanceWidget.DataContext"/> has changed
            </summary>
            <remarks>
            This may be fired in the event of a parent in the hierarchy setting the data context.
            For example, the <see cref="T:Eto.Forms.Container"/> widget fires this event when it's event is fired.
            </remarks>
        </member>
        <member name="P:Eto.InstanceWidget.DataContext">
            <summary>
            Gets or sets the data context for this widget for binding
            </summary>
            <remarks>
            Subclasses may override the standard behaviour so that hierarchy of widgets can be taken into account.
            
            For example, a Control may return the data context of a parent, if it is not set explicitly.
            </remarks>
        </member>
        <member name="E:Eto.InstanceWidget.StyleChanged">
            <summary>
            Event to handle when the style of this widget is changed
            </summary>
        </member>
        <member name="P:Eto.InstanceWidget.ControlObject">
            <summary>
            Gets the instance of the platform-specific object
            </summary>
            <remarks>
            This can sometimes be useful to get the platform-specific object.
            It is more preferred to use the <see cref="P:Eto.Widget.Handler"/> and cast that to the platform-specific
            handler class which can give you additional methods and helpers to do common tasks.
            
            For example, the <see cref="T:Eto.Forms.Application"/> object's handler for OS X has a AddFullScreenMenuItem
            property to specify if you want full screen support in your app.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Region.#ctor">
            <summary>
            Initializes a new instance of the Region class
            </summary>
        </member>
        <member name="M:Eto.Drawing.Region.#ctor(Eto.Generator)">
            <summary>
            Initializes a new instance of the Region class using the specified generator to instantiate the handler
            </summary>
            <param name="generator">Generator to use for instantiating the handler</param>
        </member>
        <member name="M:Eto.Drawing.Region.Exclude(Eto.Drawing.Rectangle)">
            <summary>
            Excludes the specified <paramref name="rectangle"/> from the region
            </summary>
            <param name="rectangle">Rectangle to exclude</param>
        </member>
        <member name="M:Eto.Drawing.Region.Reset">
            <summary>
            Resets the region
            </summary>
        </member>
        <member name="M:Eto.Drawing.Region.Set(Eto.Drawing.Rectangle)">
            <summary>
            Sets the specified <paramref name="rectangle"/> in the region
            </summary>
            <param name="rectangle">Rectangle to set the region to</param>
        </member>
        <member name="T:Eto.EtoSpecialFolder">
            <summary>
            Enumeration of the special folders that can be retrieved
            </summary>
        </member>
        <member name="F:Eto.EtoSpecialFolder.ApplicationSettings">
            <summary>
            Application settings folder to store settings or data
            </summary>
            <remarks>
            This will return a different folder, depending on the platform:
              OS X:    ~/Library/Application Settings/[Name Of Application]
              Windows: [User's Home]/AppSettings
              Linux:   
            </remarks>
        </member>
        <member name="F:Eto.EtoSpecialFolder.ApplicationResources">
            <summary>
            The application resources.path
            </summary>
            <remarks>
            In OS X, this will be the .app bunldle's resource path.  Other platforms
            will typically return the same path as the current executable file
            </remarks>
        </member>
        <member name="F:Eto.EtoSpecialFolder.Documents">
            <summary>
            The user's documents folder
            </summary>
        </member>
        <member name="T:Eto.IEtoEnvironment">
            <summary>
            Handler interface for the <see cref="T:Eto.EtoEnvironment"/> class
            </summary>
        </member>
        <member name="M:Eto.IEtoEnvironment.GetFolderPath(Eto.EtoSpecialFolder)">
            <summary>
            Gets the folder path for the specified special folder
            </summary>
            <param name="folder">Special folder to retrieve the path for</param>
            <returns>Path of the specified folder</returns>
        </member>
        <member name="T:Eto.EtoEnvironment">
            <summary>
            Environment methods
            </summary>
        </member>
        <member name="M:Eto.EtoEnvironment.GetFolderPath(Eto.EtoSpecialFolder)">
            <summary>
            Gets the folder path for the specified special folder
            </summary>
            <param name="folder">Special folder to retrieve the path for</param>
            <returns>Path of the specified folder</returns>
        </member>
        <member name="M:Eto.EtoEnvironment.GetFolderPath(Eto.Generator,Eto.EtoSpecialFolder)">
            <summary>
            Gets the folder path for the specified special folder
            </summary>
            <param name="g">Generator to use</param>
            <param name="folder">Special folder to retrieve the path for</param>
            <returns>Path of the specified folder</returns>
        </member>
        <member name="P:Eto.EtoEnvironment.Platform">
            <summary>
            Gets the platform information for the currently running operating system
            </summary>
        </member>
        <member name="T:Eto.EtoException">
            <summary>
            General exception for errors in the Eto framework
            </summary>
        </member>
        <member name="M:Eto.EtoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EtoException"/> class
            </summary>
        </member>
        <member name="M:Eto.EtoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EtoException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
        </member>
        <member name="M:Eto.EtoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EtoException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
            <param name="inner">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:Eto.EtoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EtoException"/> class
            </summary>
            <param name="context">The contextual information about the source or destination.</param>
            <param name="info">The object that holds the serialized object data.</param>
        </member>
        <member name="T:Eto.WidgetCreatedArgs">
            <summary>
            Arguments for when a widget is created
            </summary>
        </member>
        <member name="M:Eto.WidgetCreatedArgs.#ctor(Eto.IWidget)">
            <summary>
            Initializes a new instance of the WidgetCreatedArgs class
            </summary>
            <param name="instance">Instance of the widget that was created</param>
        </member>
        <member name="P:Eto.WidgetCreatedArgs.Instance">
            <summary>
            Gets the instance of the widget that was created
            </summary>
        </member>
        <member name="T:Eto.Generator">
            <summary>
            Base generator class for each platform
            </summary>
            <remarks>
            The generator takes care of creating the platform-specific implementations of each
            control. Typically, the types are automatically found from the platform assembly, however
            you can also create your own platform-specific controls by adding the types manually via
            <see cref="M:Eto.Generator.Add(System.Type,System.Type)"/>, or <see cref="M:Eto.Generator.AddAssembly(System.Reflection.Assembly)"/>.
            
            The types are found by the interface of the control.  For example the <see cref="T:Eto.Forms.Label"/> control
            uses the <see cref="T:Eto.Forms.ILabel"/> interface for its platform implementation.  The generator
            will automatically scan an assembly for a class that directly implements this interface
            for its platform implementation (if it hasn't been added manually).
            </remarks>
        </member>
        <member name="M:Eto.Generator.OnWidgetCreated(Eto.WidgetCreatedArgs)">
            <summary>
            Handles the <see cref="E:Eto.Generator.WidgetCreated"/> event
            </summary>
            <param name="e">Arguments for the event</param>
        </member>
        <member name="M:Eto.Generator.#ctor">
            <summary>
            Initializes a new instance of the Generator class
            </summary>
        </member>
        <member name="M:Eto.Generator.Supports``1">
            <summary>
            Gets a value indicating that the specified type is supported by this generator
            </summary>
            <typeparam name="T">type to test for</typeparam>
            <returns>true if the specified type is supported, false otherwise</returns>
        </member>
        <member name="M:Eto.Generator.Initialize(Eto.Generator)">
            <summary>
            Initializes this generator as the current generator
            </summary>
            <remarks>
            This is called automatically by the <see cref="T:Eto.Forms.Application"/> when it is constructed
            </remarks>
            <param name="generator">Generator to set as the current generator</param>
        </member>
        <member name="M:Eto.Generator.GetGenerator(System.String)">
            <summary>
            Gets the generator of the specified type
            </summary>
            <param name="generatorType">Type of the generator to get</param>
            <returns>An instance of a Generator of the specified type</returns>
        </member>
        <member name="M:Eto.Generator.Add``1(System.Type)">
            <summary>
            Adds the specified handler type to this generator
            </summary>
            <remarks>
            This can be used to add a single handler to this generator.  Typically you would do this
            before running your application.
            </remarks>
            <example>
            <code><![CDATA[
            var generator = Generator.Detect;
            generator.Add<IMyControl>(typeof(MyControlHandler));
            ]]></code>
            </example>
            <typeparam name="T">Type of the handler interface (derived from <see cref="T:Eto.IWidget"/> or another type)</typeparam>
            <param name="handlerType">Type of the backend handler type that implements the interface</param>
            <returns>An instance of the constructor info used to create instances of this type</returns>
        </member>
        <member name="M:Eto.Generator.Find``1">
            <summary>
            Finds the constructor info for the specified type
            </summary>
            <typeparam name="T">Type of the handler interface (derived from <see cref="T:Eto.IWidget"/> or another type)</typeparam>
            <returns>An instance of the constructor info used to create instances of this type</returns>
        </member>
        <member name="M:Eto.Generator.CreateHandler``1(Eto.Widget)">
            <summary>
            Creates a new instance of the handler of the specified type
            </summary>
            <typeparam name="T">Type of handler to create</typeparam>
            <param name="widget">Widget instance to attach to the handler</param>
            <returns>A new instance of a handler</returns>
        </member>
        <member name="M:Eto.Generator.Add(System.Type,System.Type)">
            <summary>
            Adds the specified handler type to this generator
            </summary>
            <remarks>
            This can be used to add a single handler to this generator.  Typically you would do this
            before running your application.
            </remarks>
            <example>
            <code><![CDATA[
            var generator = Generator.Detect;
            generator.Add<IMyControl>(typeof(MyControlHandler));
            ]]></code></example>
            <param name="type">Type of the handler interface (derived from <see cref="T:Eto.IWidget"/> or another type)</param>
            <param name="handlerType">Type of the backend handler type that implements the interface</param>
            <returns>An instance of the constructor info used to create instances of this type</returns>
        </member>
        <member name="M:Eto.Generator.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Adds the specified assembly to scan for handler impelementations
            </summary>
            <remarks>
            If you create your own controls with custom handlers, you can use this method
            to add the assembly to the list of assemblies that will be scanned for the handler
            implementations.
            </remarks>
            <param name="assembly">Assembly with handler implementations to add</param>
        </member>
        <member name="M:Eto.Generator.CreateHandler(System.Type,Eto.Widget)">
            <summary>
            Creates a new instance of the handler of the specified type
            </summary>
            <param name="type">Type of handler to create</param>
            <param name="widget">Widget instance to attach to the handler</param>
            <returns>A new instance of a handler</returns>
        </member>
        <member name="M:Eto.Generator.ExecuteOnMainThread(System.Action)">
            <summary>
            Executes the specified action on the main thread
            </summary>
            <param name="action">Action to invoke</param>
        </member>
        <member name="M:Eto.Generator.ThreadStart">
            <summary>
            Used at the start of your custom threads
            </summary>
            <returns></returns>
        </member>
        <member name="E:Eto.Generator.WidgetCreated">
            <summary>
            Event to handle when widgets are created by this generator
            </summary>
        </member>
        <member name="P:Eto.Generator.ID">
            <summary>
            Gets the ID of this generator
            </summary>
            <remarks>
            The generator ID can be used to determine which generator is currently in use.  The generator
            does not necessarily correspond to the OS that it is running on, as for example the GTK platform
            can run on OS X and Windows.
            </remarks>
        </member>
        <member name="P:Eto.Generator.Current">
            <summary>
            Gets the current generator
            </summary>
            <remarks>
            Typically you'd have only one platform generator active at a time, and this holds an instance
            to that value.  The current generator is set automatically by the <see cref="T:Eto.Forms.Application"/> class
            when it is initially created.
            
            This will be used when creating controls, unless explicitly passed through the constructor of the
            control. This allows you to use multiple generators at one time.
            </remarks>
        </member>
        <member name="P:Eto.Generator.Detect">
            <summary>
            Returns the current generator, or detects the generator to use if no current generator is set.
            </summary>
            <remarks>
            This detects the platform to use based on the generator assemblies available and the current OS.
            
            For windows, it will prefer WPF to Windows Forms.
            Mac OS X will prefer the Mac platform.
            Other unix-based platforms will prefer GTK.
            </remarks>
        </member>
        <member name="T:Eto.Generators">
            <summary>
            Constants for the standard platform generators
            </summary>
        </member>
        <member name="F:Eto.Generators.Ios">
            <summary>
            ID of the iOS platform
            </summary>
        </member>
        <member name="F:Eto.Generators.IosAssembly">
            <summary>
            Assembly name of the iOS platform
            </summary>
        </member>
        <member name="F:Eto.Generators.Gtk">
            <summary>
            ID of the GTK platform
            </summary>
        </member>
        <member name="F:Eto.Generators.GtkAssembly">
            <summary>
            Assembly name of the GTK platform
            </summary>
        </member>
        <member name="F:Eto.Generators.Mac">
            <summary>
            ID of the Mac OS X platform
            </summary>
        </member>
        <member name="F:Eto.Generators.MacAssembly">
            <summary>
            Assembly name of the Mac OS X platform
            </summary>
        </member>
        <member name="F:Eto.Generators.Windows">
            <summary>
            ID of the Windows forms platform
            </summary>
        </member>
        <member name="F:Eto.Generators.WinAssembly">
            <summary>
            Assembly name of the Windows Forms platform
            </summary>
        </member>
        <member name="F:Eto.Generators.Wpf">
            <summary>
            ID of the WPF platform
            </summary>
        </member>
        <member name="F:Eto.Generators.WpfAssembly">
            <summary>
            Assembly name of the WPF platform
            </summary>
        </member>
        <member name="T:Eto.OperatingSystemPlatform">
            <summary>
            Operating system platform information
            </summary>
            <remarks>
            Access this information from <see cref="P:Eto.EtoEnvironment.Platform"/>
            </remarks>
        </member>
        <member name="M:Eto.OperatingSystemPlatform.#ctor">
            <summary>
            Initializes a new instance of the OperatingSystemPlatform class
            </summary>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsMono">
            <summary>
            Gets a value indicating that the current .NET runtime is mono
            </summary>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsWindows">
            <summary>
            Gets a value indicating that the current OS is windows system
            </summary>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsUnix">
            <summary>
            Gets a value indicating that the current OS is a unix-based system
            </summary>
            <remarks>
            This will be true for both Unix (e.g. OS X) and all Linux variants.
            </remarks>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsMac">
            <summary>
            Gets a value indicating that the current OS is a Mac OS X system
            </summary>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsLinux">
            <summary>
            Gets a value indicating that the current OS is a Linux system
            </summary>
        </member>
        <member name="T:Eto.PropertyStore">
            <summary>
            Attachable property storage for xaml
            </summary>
            <remarks>
            This is used as a storage for xaml property values.
            </remarks>
        </member>
        <member name="M:Eto.PropertyStore.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the PropertyStore class
            </summary>
            <param name="parent">Object that contains this property store</param>
        </member>
        <member name="M:Eto.PropertyStore.Get``1(System.Xaml.AttachableMemberIdentifier,``0)">
            <summary>
            Gets an attachable property value, using a default if not set to a value
            </summary>
            <typeparam name="T">Type of the property value to get</typeparam>
            <param name="member">Member to retrieve</param>
            <param name="defaultValue">Default value to use if no value is stored</param>
            <returns>Value of the attached property, or <paramref name="defaultValue"/> if not set</returns>
        </member>
        <member name="M:Eto.PropertyStore.Get``1(System.Xaml.AttachableMemberIdentifier)">
            <summary>
            Gets an attachable property value
            </summary>
            <typeparam name="T">Type of the property value to get</typeparam>
            <param name="member">Member to retrieve</param>
            <returns>Value of the attached property</returns>
        </member>
        <member name="P:Eto.PropertyStore.Parent">
            <summary>
            Gets the parent object of this store
            </summary>
        </member>
        <member name="T:Eto.ResourceNotFoundException">
            <summary>
            Exception for when a resource is not found
            </summary>
            <remarks>
            Used typically when using FromResource methods
            </remarks>
        </member>
        <member name="M:Eto.ResourceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ResourceNotFoundException"/> class
            </summary>
        </member>
        <member name="M:Eto.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ResourceNotFoundException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
        </member>
        <member name="M:Eto.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ResourceNotFoundException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
            <param name="inner">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:Eto.ResourceNotFoundException.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ResourceNotFoundException"/> class
            </summary>
            <param name="assembly">The assembly the resource was attempted to be retrieved from</param>
            <param name="resourceName">Name of the resource</param>
        </member>
        <member name="M:Eto.ResourceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ResourceNotFoundException"/> class
            </summary>
            <param name="context">The contextual information about the source or destination.</param>
            <param name="info">The object that holds the serialized object data.</param>
        </member>
        <member name="T:Eto.Resources">
            <summary>
            Obsolete resource helper class
            </summary>
        </member>
        <member name="M:Eto.Resources.GetResource(System.String)">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="M:Eto.Resources.GetResource(System.String,System.Reflection.Assembly)">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="T:Eto.UnregisterCallback`1">
            <summary>
            Delegate to call back when unregistering an event for the <see cref="T:Eto.WeakEventHandler`2"/>
            </summary>
            <typeparam name="E">Type of <see cref="T:System.EventArgs"/> used in the event handler</typeparam>
            <param name="eventHandler">The event handler that was registered that should be unregistered</param>
        </member>
        <member name="T:Eto.IWeakEventHandler`1">
            <summary>
            Interface to the <see cref="T:Eto.WeakEventHandler`2"/>
            </summary>
            <remarks>
            This is used by the <see cref="T:Eto.WeakEventExtensions"/>
            </remarks>
            <typeparam name="E"></typeparam>
        </member>
        <member name="P:Eto.IWeakEventHandler`1.Handler">
            <summary>
            Gets the event handler to attach to the event
            </summary>
        </member>
        <member name="T:Eto.WeakEventHandler`2">
            <summary>
            Implementation of the Weak Event Handler pattern
            </summary>
            <remarks>
            This allows you to hook up events to an object without preventing
            the object from being garbage collected due to the lifetime of the event handler.
            
            You should use the helper method <see cref="M:Eto.WeakEventExtensions.MakeWeak``1(System.EventHandler{``0},Eto.UnregisterCallback{``0})"/> to set up the weak event.
            </remarks>
            <typeparam name="T">Type of the class the event handler is on</typeparam>
            <typeparam name="E">Type of arguments for the event handler</typeparam>
        </member>
        <member name="M:Eto.WeakEventHandler`2.#ctor(System.EventHandler{`1},Eto.UnregisterCallback{`1})">
            <summary>
            Initializes a new instance of the WeakEventHandler
            </summary>
            <param name="eventHandler">event handler to hook up</param>
            <param name="unregister">callback to unregister the event handler</param>
        </member>
        <member name="M:Eto.WeakEventHandler`2.Invoke(System.Object,`1)">
            <summary>
            Invokes the weak event handler
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.WeakEventHandler`2.op_Implicit(Eto.WeakEventHandler{`0,`1})~System.EventHandler{`1}">
            <summary>
            Implicitly converts
            </summary>
            <param name="weh"></param>
            <returns></returns>
        </member>
        <member name="P:Eto.WeakEventHandler`2.Handler">
            <summary>
            Gets the handler to attach to the long lived object
            </summary>
        </member>
        <member name="T:Eto.WeakEventExtensions">
            <summary>
            Extensions for weak events
            </summary>
        </member>
        <member name="M:Eto.WeakEventExtensions.MakeWeak``1(System.EventHandler{``0},Eto.UnregisterCallback{``0})">
            <summary>
            Makes an event handler weak bound
            </summary>
            <example>
            <code><![CDATA[
            
            void SetupEvent (MyLongLived longLived)
            {
            	longLived.SomeEvent += new EventHandler<EventArgs>(SomeEventHandler).MakeWeak(e => longLived.SomeEvent -= e);
            }
            
            void SomeEventHandler(object sender, EventArgs e)
            {
            	// handler on short lived object
            }
            ]]></code>
            </example>
            <typeparam name="E">Type of <see cref="T:System.EventArgs"/> for the event</typeparam>
            <param name="eventHandler">Event handler to wire up</param>
            <param name="unregister">Delegate to unregister the event handler</param>
            <returns>Event handler to attach to the long lived object</returns>
        </member>
        <member name="T:Eto.WidgetHandler`1">
            <summary>
            Base platform handler for widgets
            </summary>
            <remarks>
            This is the base class for platform handlers. 
            It is used to help wire up events and provide base functionality of a widget.
            
            If you are creating an InstanceWidget, you should use <see cref="T:Eto.WidgetHandler`2"/>.
            </remarks>
            <example>
            This example shows how to implement a platform handler for a widget called StaticWidget
            <code><![CDATA[
            // override the class and implement widget-specific interface
            public MyStaticWidgetHandler : WidgetHandler<StaticWidget>, IStaticWidget
            {
            	// implement IStaticWidget's properties and methods
            }
            ]]></code>
            </example>
            <seealso cref="T:Eto.WidgetHandler`2"/>
            <typeparam name="W">Type of widget the handler is for</typeparam>
        </member>
        <member name="M:Eto.WidgetHandler`1.Finalize">
            <summary>
            Finalizes the WidgetHandler
            </summary>
        </member>
        <member name="M:Eto.WidgetHandler`1.#ctor">
            <summary>
            Initializes a new instance of the WidgetHandler class
            </summary>
        </member>
        <member name="M:Eto.WidgetHandler`1.Initialize">
            <summary>
            Called to initialize this widget after it has been constructed
            </summary>
            <remarks>
            Override this to initialize any of the platform objects.  This is called
            in the widget constructor, after all of the widget's constructor code has been called.
            </remarks>
        </member>
        <member name="M:Eto.WidgetHandler`1.IsEventHandled(System.String)">
            <summary>
            Gets a value indicating that the specified event is handled
            </summary>
            <param name="id">Identifier of the event</param>
            <returns>True if the event is handled, otherwise false</returns>
        </member>
        <member name="M:Eto.WidgetHandler`1.HandleEvent(System.String)">
            <summary>
            Called to handle the specified event
            </summary>
            <remarks>
            This is typically called directly from the Widget's event handlers, or from the
            user of the widget manually.  This method takes care of only handling the
            event once by passing the event off to <see cref="M:Eto.WidgetHandler`1.AttachEvent(System.String)"/> only when it has
            not been attached already.
            </remarks>
            <param name="id">Identifier of the event</param>
        </member>
        <member name="M:Eto.WidgetHandler`1.AttachEvent(System.String)">
            <summary>
            Attaches the specified event to the platform-specific control
            </summary>
            <remarks>
            Implementors should override this method to handle any events that the widget
            supports. Ensure to call the base class' implementation if the event is not
            one the specific widget supports, so the base class' events can be handled as well.
            </remarks>
            <param name="id">Identifier of the event</param>
        </member>
        <member name="M:Eto.WidgetHandler`1.Dispose">
            <summary>
            Disposes this object
            </summary>
            <remarks>
            To handle disposal logic, use the <see cref="M:Eto.WidgetHandler`1.Dispose(System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="M:Eto.WidgetHandler`1.Dispose(System.Boolean)">
            <summary>
            Disposes the object
            </summary>
            <param name="disposing">True when disposed manually, false if disposed via the finalizer</param>
        </member>
        <member name="P:Eto.WidgetHandler`1.Widget">
            <summary>
            Gets the widget that this platform handler is attached to
            </summary>
        </member>
        <member name="P:Eto.WidgetHandler`1.Eto#IWidget#Widget">
            <summary>
            Gets or sets the widget instance
            </summary>
        </member>
        <member name="T:Eto.WidgetHandler`2">
            <summary>
            Base platform handler for <see cref="T:Eto.InstanceWidget"/> objects
            </summary>
            <remarks>
            This is the base class for platform handlers. 
            It is used to help wire up events and provide base functionality of a widget.
            </remarks>
            <example>
            This example shows how to implement a platform handler for a widget
            <code><![CDATA[
            // override the class and implement widget-specific interface
            public MyWidgetHandler : WidgetHandler<MyPlatformControl, MyWidget>, IMyWidget
            {
            	// implement IStaticWidget's properties and methods
            }
            ]]></code>
            </example>
            <seealso cref="T:Eto.WidgetHandler`2"/>
            <typeparam name="T">Type of the platform-specific object</typeparam>
            <typeparam name="W">Type of widget the handler is for</typeparam>
        </member>
        <member name="M:Eto.WidgetHandler`2.#ctor">
            <summary>
            Initializes a new instance of the WidgetHandler class
            </summary>
        </member>
        <member name="M:Eto.WidgetHandler`2.CreateControl">
            <summary>
            Called to create the platform control for this widget
            </summary>
            <remarks>
            This is used so that it is easy to override the control that is created for a handler.
            If you derive from an existing platform handler to override it's behaviour, you can change
            the class that is created via this method. You will still need that control to be of the same
            type that the original handler has defined, but you will be able to subclass the platform control
            to provide any specific functionality if needed.
            
            This gets called automatically by <see cref="M:Eto.WidgetHandler`2.Initialize"/>, so you should only set properties on your control
            in the handler's overridden initialize method, after the base class' initialize has been called.
            </remarks>
            <returns>A new instance of the platform-specific control this handler encapsulates</returns>
        </member>
        <member name="M:Eto.WidgetHandler`2.Initialize">
            <summary>
            Called to initialize this widget after it has been constructed
            </summary>
            <remarks>
            Override this to initialize any of the platform objects.  This is called
            in the widget constructor, after all of the widget's constructor code has been called.
            </remarks>
        </member>
        <member name="M:Eto.WidgetHandler`2.Dispose(System.Boolean)">
            <summary>
            Disposes this widget and the associated control if <see cref="P:Eto.WidgetHandler`2.DisposeControl"/> is <c>true</c>
            </summary>
            <param name="disposing">True if <see cref="M:Eto.WidgetHandler`2.Dispose(System.Boolean)"/> was called manually, false if called from the finalizer</param>
        </member>
        <member name="P:Eto.WidgetHandler`2.ID">
            <summary>
            Gets or sets the ID of this widget
            </summary>
        </member>
        <member name="P:Eto.WidgetHandler`2.DisposeControl">
            <summary>
            Gets or sets a value indicating that control should automatically be disposed when this widget is disposed
            </summary>
        </member>
        <member name="P:Eto.WidgetHandler`2.Control">
            <summary>
            Gets or sets the platform-specific control object
            </summary>
        </member>
        <member name="P:Eto.WidgetHandler`2.Eto#IInstanceWidget#ControlObject">
            <summary>
            Gets the platform-specific control object
            </summary>
        </member>
        <member name="T:Eto.Forms.DialogDisplayMode">
            <summary>
            Hint to tell the platform how to display the dialog
            </summary>
            <remarks>
            This tells the platform how you prefer to display the dialog.  Each platform
            may support only certain modes and will choose the appropriate mode based on the hint
            given.
            </remarks>
        </member>
        <member name="F:Eto.Forms.DialogDisplayMode.Default">
            <summary>
            The default display mode for modal dialogs in the platform
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogDisplayMode.Attached">
            <summary>
            Display the dialog attached to the parent window, if supported (e.g. OS X)
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogDisplayMode.Separate">
            <summary>
            Display the dialog as a separate window (e.g. Windows/Linux only supports this mode)
            </summary>
        </member>
        <member name="P:Eto.Forms.IFileDialogFilter.Name">
            <summary>
            Gets the name of the filter
            </summary>
        </member>
        <member name="P:Eto.Forms.IFileDialogFilter.Extensions">
            <summary>
            Gets the extensions
            </summary>
            <remarks>
            Each extension should include the period.  e.g. ".jpeg", ".png", etc.
            </remarks>
        </member>
        <member name="F:Eto.Forms.Key.Menu">
            <summary>The menu key</summary>
        </member>
        <member name="P:Eto.Forms.UITimer.Interval">
            <summary>
            Gets or sets the interval, in seconds
            </summary>
        </member>
        <member name="T:Eto.Forms.KeyPressEventArgs">
            <summary>
            Arguments for key press events
            </summary>
        </member>
        <member name="M:Eto.Forms.KeyPressEventArgs.#ctor(Eto.Forms.Key,System.Char)">
            <summary>
            Initializes a new instance of the KeyPressEventArgs class for a character key press
            </summary>
            <param name="key">key and modifiers that were pressed</param>
            <param name="keyChar">character equivalent</param>
        </member>
        <member name="M:Eto.Forms.KeyPressEventArgs.#ctor(Eto.Forms.Key)">
            <summary>
            Initializes a new instance of the KeyPressEventArgs class for a non-character key press
            </summary>
            <param name="key">key and modifiers that were pressed</param>
        </member>
        <member name="P:Eto.Forms.KeyPressEventArgs.KeyData">
            <summary>
            Gets the raw key data (the combination of the <see cref="P:Eto.Forms.KeyPressEventArgs.Key"/> and <see cref="P:Eto.Forms.KeyPressEventArgs.Modifiers"/>)
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyPressEventArgs.Key">
            <summary>
            Gets the key value (without modifiers)
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyPressEventArgs.Modifiers">
            <summary>
            Gets the modifier keys that were pressed for this event
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyPressEventArgs.IsChar">
            <summary>
            Gets a value indicating that the key press corresponds to a character input value
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyPressEventArgs.Handled">
            <summary>
            Gets or sets a value indicating that this event was handled by user code
            </summary>
            <remarks>
            If you pass true for this, typically the key press will not be passed to the control
            for event processing. This also allows controls to handle key combinations that would
            otherwise be handled as a shortcut in the menu or toolbar items.
            </remarks>
        </member>
        <member name="P:Eto.Forms.KeyPressEventArgs.KeyChar">
            <summary>
            Gets the key character corresponding to the key press (if <see cref="P:Eto.Forms.KeyPressEventArgs.IsChar"/> is true)
            </summary>
        </member>
        <member name="T:Eto.Forms.SeparatorToolBarItemType">
            <summary>
            Enumeration of the types of separators for the <see cref="T:Eto.Forms.SeparatorToolBarItem"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.SeparatorToolBarItemType.Divider">
            <summary>
            Line divider
            </summary>
        </member>
        <member name="F:Eto.Forms.SeparatorToolBarItemType.Space">
            <summary>
            Fixed space divider
            </summary>
        </member>
        <member name="F:Eto.Forms.SeparatorToolBarItemType.FlexibleSpace">
            <summary>
            Flexible space divider (not available on all platforms)
            </summary>
            <remarks>
            This is (currently) only available for OS X applications as
            other platforms left-align their toolbars.
            </remarks>
        </member>
        <member name="T:Eto.Forms.ToolBar">
            <summary>
            Summary description for ToolBar.
            </summary>
        </member>
        <member name="T:Eto.Misc.Platform">
            <summary>
            Obsolete. Use <see cref="P:Eto.EtoEnvironment.Platform"/> instead.
            </summary>
        </member>
        <member name="P:Eto.Misc.Platform.IsMono">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="P:Eto.Misc.Platform.IsWindows">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="P:Eto.Misc.Platform.IsUnix">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="P:Eto.Misc.Platform.IsMac">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="P:Eto.Misc.Platform.IsLinux">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="T:Eto.Xaml.XamlReader">
            <summary>
            Methods to help load/save Eto objects to/from xaml
            </summary>
        </member>
        <member name="M:Eto.Xaml.XamlReader.Load``1">
            <summary>
            Loads the specified type from a xaml of the same name
            </summary>
            <remarks>
            If your class name is MyNamespace.MyType, then this will attempt to load MyNamespace.MyType.xaml
            for the xaml definition in the same assembly.
            
            If you want to specify a different xaml, use <see cref="M:Eto.Xaml.XamlReader.Load``1(System.IO.Stream)"/>
            </remarks>
            <typeparam name="T">Type of object to load from xaml</typeparam>
            <returns>A new instance of the specified type with the contents loaded from xaml</returns>
        </member>
        <member name="M:Eto.Xaml.XamlReader.Load``1(System.IO.Stream)">
            <summary>
            Loads the specified type from the specified xaml stream
            </summary>
            <remarks>
            If your class name is MyNamespace.MyType, then this will attempt to load MyNamespace.MyType.xaml
            for the xaml definition in the same assembly.
            </remarks>
            <typeparam name="T">Type of object to load from the specified xaml</typeparam>
            <param name="stream">Xaml content to load (e.g. from resources)</param>
            <returns>A new instance of the specified type with the contents loaded from the xaml stream</returns>
        </member>
        <member name="M:Eto.Xaml.XamlReader.Load``1(``0)">
            <summary>
            Loads the specified instance with xaml of the same name
            </summary>
            <remarks>
            If your class name is MyNamespace.MyType, then this will attempt to load MyNamespace.MyType.xaml
            for the xaml definition in the same assembly.
            
            If you want to specify a different xaml, use <see cref="M:Eto.Xaml.XamlReader.Load``1(System.IO.Stream,``0)"/>
            </remarks>
            <typeparam name="T">Type of object to load from the specified xaml</typeparam>
            <param name="instance">Instance to use as the starting object</param>
            <returns>A new or existing instance of the specified type with the contents loaded from the xaml stream</returns>
        </member>
        <member name="M:Eto.Xaml.XamlReader.Load``1(System.IO.Stream,``0)">
            <summary>
            Loads the specified type from the specified xaml stream
            </summary>
            <typeparam name="T">Type of object to load from the specified xaml</typeparam>
            <param name="stream">Xaml content to load (e.g. from resources)</param>
            <param name="instance">Instance to use as the starting object</param>
            <returns>A new or existing instance of the specified type with the contents loaded from the xaml stream</returns>
        </member>
        <member name="T:Eto.IXmlReadable">
            <summary>
            Interface to declare an object that can serialize to/from xml
            </summary>
            <remarks>
            This interface is useful when you are reading/writing objects to xml
            manually by using <see cref="T:Eto.XmlExtensions"/>.
            
            There are methods to load/save a collection of child objects and singular
            child objects when you implement this interface which makes reading/writing to xml
            super easy.
            </remarks>
        </member>
        <member name="M:Eto.IXmlReadable.ReadXml(System.Xml.XmlElement)">
            <summary>
            Reads/deserializes the xml element into the object
            </summary>
            <param name="element">Element that represents the object</param>
        </member>
        <member name="M:Eto.IXmlReadable.WriteXml(System.Xml.XmlElement)">
            <summary>
            Writes/serializes the object into the xml element
            </summary>
            <param name="element">Element that will represent the object</param>
        </member>
        <member name="T:Eto.CreateFromXml`1">
            <summary>
            Delegate to create the specified object from an XmlElement
            </summary>
            <remarks>
            This is used for certain <see cref="T:Eto.XmlExtensions"/> to create child objects when reading xml elements.
            
            The implementors of this delegate typically do not need to read the object from XML, just create the
            instance of the object based on certain criteria (e.g. a type or ID)
            </remarks>
            <typeparam name="T">Type of object to create based on the element</typeparam>
            <param name="element">Element to create the object from</param>
            <returns>A new instance of the specified type for the element</returns>
        </member>
        <member name="T:Eto.XmlToValue`1">
            <summary>
            Delegate to translate an attribute value to the specified type
            </summary>
            <typeparam name="T">Type to translate to</typeparam>
            <param name="attribute">Attribute value to translate from</param>
            <param name="result">Resulting value from the attribute type</param>
            <returns>True if the translation was sucessful, false otherwise</returns>
        </member>
        <member name="T:Eto.XmlExtensions">
            <summary>
            Extensions for reading/writing xml values
            </summary>
        </member>
        <member name="M:Eto.XmlExtensions.GetStringAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Gets a string attribute value from the specified element
            </summary>
            <remarks>
            This differs from the regular <see cref="M:System.Xml.XmlElement.GetAttribute(System.String)"/> in that if the string is empty
            it will return null.
            </remarks>
            <param name="element">Element to read the attribute</param>
            <param name="name">Name of the attribute to read</param>
            <returns>A string value of the attribute, or null if it is empty or null</returns>
        </member>
        <member name="M:Eto.XmlExtensions.GetBoolAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Gets a boolean attribute value from the specified element.  The value should be 'true', 'false' or empty.
            </summary>
            <remarks>
            This uses <see cref="M:System.Boolean.TryParse(System.String,System.Boolean@)"/> to parse the value.
            </remarks>
            <param name="element">Element to read the attribute from</param>
            <param name="name">Name of the attribute</param>
            <returns>True or False if the value is a valid boolean value, null otherwise</returns>
        </member>
        <member name="M:Eto.XmlExtensions.GetEnumAttribute``1(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Gets a enumeration attribute value from the specified element.
            </summary>
            <remarks>
            This uses <see cref="M:System.Enum.TryParse``1(System.String,``0@)"/> to parse the value
            </remarks>
            <typeparam name="T">Type of enumeration to read</typeparam>
            <param name="element">Element to read the attribute value from</param>
            <param name="name">Name of the attribute value</param>
            <param name="ignoreCase">True to ignore case when parsing, false to be case sensitive</param>
            <returns>Value of the parsed enumeration, or null if it cannot be parsed</returns>
        </member>
        <member name="M:Eto.XmlExtensions.GetIntAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Gets an integer attribute value from the specified element
            </summary>
            <remarks>
            This uses <see cref="M:System.Int32.TryParse(System.String,System.Int32@)"/> to parse the value.
            </remarks>
            <param name="element">Element to read the attribute from</param>
            <param name="name">Name of the attribute</param>
            <returns>Integer value of the attribute, or null if it is invalid or missing</returns>
        </member>
        <member name="M:Eto.XmlExtensions.GetFloatAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Gets a float attribute value from the specified element
            </summary>
            <remarks>
            This uses <see cref="M:System.Single.TryParse(System.String,System.Single@)"/> to parse the value.
            </remarks>
            <param name="element">Element to read the attribute from</param>
            <param name="name">Name of the attribute</param>
            <returns>Float value of the attribute, or null if it is invalid or missing</returns>
        </member>
        <member name="M:Eto.XmlExtensions.GetAttribute``1(System.Xml.XmlElement,System.String,Eto.XmlToValue{``0})">
            <summary>
            Gets a translated value of an attribute of the specified element
            </summary>
            <param name="element">Element to read the attribute from</param>
            <param name="name">Name of the attribute</param>
            <param name="translate">Delegate used to translate the string value to the desired type</param>
            <returns>Value returned by the translate delegate, or null if the translate delegate returned false</returns>
        </member>
        <member name="M:Eto.XmlExtensions.SetAttribute``1(System.Xml.XmlElement,System.String,``0)">
            <summary>
            Sets an attribute of the specified element to a value
            </summary>
            <remarks>
            This uses <see cref="M:System.Convert.ToString(System.Object)"/> to translate the value to a string attribute value.
            </remarks>
            <typeparam name="T">Type of the value to set (usually inferred so you don't have to set it)</typeparam>
            <param name="element">Element to set the attribute value</param>
            <param name="name">Name of the attribute to set</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Eto.XmlExtensions.WriteChildXml``1(System.Xml.XmlElement,System.String,``0)">
            <summary>
            Adds a new element as a child to the specified element, if the child value is not null
            </summary>
            <remarks>
            This allows you to easily write child objects to xml, when they implement the <see cref="T:Eto.IXmlReadable"/> interface.
            </remarks>
            <seealso cref="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String)"/>
            <example>
            <code><![CDATA[
            public class MyChild : IXmlReadable {
            	// implement IXmlReadable
            }
            
            public class MyParent : IXmlReadable {
            
            	public MyChild Child { get; set; }
            	
            	public void WriteXml (XmlElement element) {
            		element.WriteChildXml("mychild", this.Child);
            	}
            	
            	public void ReadXml (XmlElement element) {
            		this.Child = element.ReadChildXml<MyChild>("mychild");
            	}
            }
            ]]></code>
            </example>
            <typeparam name="T">Type of child to write (must be <see cref="T:Eto.IXmlReadable"/>)</typeparam>
            <param name="element">Element to add the child to</param>
            <param name="childElementName">Name of the child element to create</param>
            <param name="child">Child value to translate to a new child element</param>
        </member>
        <member name="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String)">
            <summary>
            Reads a single child xml element from the specified element as a given type
            </summary>
            <remarks>
            This is useful for reading a (singular) child element of an xml element into an object that implements
            <see cref="T:Eto.IXmlReadable"/>.
            
            If you want to use a class that requires certain parameters for construction or to create a different derived type
            based on certain attributes of the child xml element, use <see cref="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String,Eto.CreateFromXml{``0})"/> instead.
            </remarks>
            <seealso cref="M:Eto.XmlExtensions.WriteChildXml``1(System.Xml.XmlElement,System.String,``0)"/>
            <seealso cref="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String,Eto.CreateFromXml{``0})"/>
            <example>
            <code><![CDATA[
            public class MyChild : IXmlReadable {
            	// implement IXmlReadable
            }
            
            public class MyParent : IXmlReadable {
            
            	public MyChild Child { get; set; }
            	
            	public void WriteXml (XmlElement element) {
            		element.WriteChildXml("mychild", this.Child);
            	}
            	
            	public void ReadXml (XmlElement element) {
            		this.Child = element.ReadChildXml<MyChild>("mychild");
            	}
            }
            ]]></code>
            </example>
            <typeparam name="T">Type of child to read (must be <see cref="T:Eto.IXmlReadable"/>)</typeparam>
            <param name="element">Element to read the child node from</param>
            <param name="childElementName">Name of the child element to read</param>
            <returns>A new instance of the specified type if the child element exists with properties read from xml, otherwise null</returns>
        </member>
        <member name="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String,Eto.CreateFromXml{``0})">
            <summary>
            Reads a single child xml element from the specified element as a given type, constructing the child programatically
            </summary>
            <remarks>
            This is useful for reading a (singular) child element of an xml element into an object that implements
            <see cref="T:Eto.IXmlReadable"/>.  This also gives you a way to create the instance used for the child object
            programatically.
            
            If your child class does not require special construction logic and has a default constructor, you can use <see cref="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String)"/> instead.
            </remarks>
            <seealso cref="M:Eto.XmlExtensions.WriteChildXml``1(System.Xml.XmlElement,System.String,``0)"/>
            <seealso cref="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String)"/>
            <example>
            <code><![CDATA[
            public class MyChild : IXmlReadable {
            	public static MyChild CreateFromXml (XmlElement element) {
            		switch (element.GetAttribute("type")) {
            			case "typea": return new MyChildTypeA();
            			case "typeb": return new MyChildTypeB();
            			default: return null;
            		}
            	}
            	
            	// implement IXmlReadable (usually as virtual methods for derived classes to override)
            }
            
            public class MyChildTypeA : MyChild {
            }
            
            public class MyChildTypeB : MyChild {
            }
            
            public class MyParent : IXmlReadable {
            
            	public MyChild Child { get; set; }
            	
            	public void WriteXml (XmlElement element) {
            		element.WriteChildXml("mychild", this.Child);
            	}
            	
            	public void ReadXml (XmlElement element) {
            		this.Child = element.ReadChildXml<MyChild>("mychild", MyChild.CreateFromXml);
            	}
            }
            ]]></code>
            </example>
            <typeparam name="T">Type of child to read (must be <see cref="T:Eto.IXmlReadable"/>)</typeparam>
            <param name="element">Element to read the child node from</param>
            <param name="childElementName">Name of the child element to read</param>
            <param name="create">Delegate to create the child object instance if needed</param>
            <returns>A new instance of the specified type if the child element exists with properties read from xml, otherwise null</returns>
        </member>
        <member name="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String,``0)">
            <summary>
            Reads a single child xml element from the specified element as a given type, constructing the child programatically
            </summary>
            <remarks>
            This is useful for reading a (singular) child element of an xml element into an object that implements
            <see cref="T:Eto.IXmlReadable"/>.  This also gives you a way to create the instance used for the child object
            programatically.
            
            If your child class does not require special construction logic and has a default constructor, you can use <see cref="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String)"/> instead.
            </remarks>
            <seealso cref="M:Eto.XmlExtensions.WriteChildXml``1(System.Xml.XmlElement,System.String,``0)"/>
            <seealso cref="M:Eto.XmlExtensions.ReadChildXml``1(System.Xml.XmlElement,System.String)"/>
            <example>
            <code><![CDATA[
            public class MyChild : IXmlReadable {
            	// implement IXmlReadable
            }
            
            public class MyParent : IXmlReadable {
            
            	public MyChild Child { get; set; }
            	
            	public void WriteXml (XmlElement element) {
            		element.WriteChildXml("mychild", this.Child);
            	}
            	
            	public void ReadXml (XmlElement element) {
            		this.Child = new MyChild();
            		element.ReadChildXml<MyChild>("mychild", this.Child);
            	}
            }
            ]]></code>
            </example>
            <typeparam name="T">Type of child to read (must be <see cref="T:Eto.IXmlReadable"/>)</typeparam>
            <param name="element">Element to read the child node from</param>
            <param name="childElementName">Name of the child element to read</param>
            <param name="child">Instance of the child object to read the XML into</param>
            <returns>A new instance of the specified type if the child element exists with properties read from xml, otherwise null</returns>
        </member>
        <member name="M:Eto.XmlExtensions.WriteChildListXml``1(System.Xml.XmlElement,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Writes a list of <see cref="T:Eto.IXmlReadable"/> objects as child elements of the specified element, with an optional child list element
            </summary>
            <remarks>
            This extension is useful for writing lists of objects to xml. With this, you can write the list as direct
            children of the specified element, or to insert an additional list element using the <paramref name="listElement"/> parameter.
            </remarks>
            <example>
            <code><![CDATA[
            public class MyChild : IXmlReadable {
            	// implement IXmlReadable
            }
            
            public class MyParent : IXmlReadable {
            
            	public List<MyChild> Children { get; set; }
            	
            	public void WriteXml (XmlElement element) {
            		element.WriteChildListXml<MyChild>(this.Children, "mychild", "children");
            	}
            	
            	public void ReadXml (XmlElement element) {
            		this.Children = new List<MyChild>();
            		element.ReadChildListXml<MyChild>(this.Children, "mychild", "children");
            	}
            }
            ]]></code>
            </example>
            <typeparam name="T">Type of items in the list of elements to write</typeparam>
            <param name="element">Element to write the child elements to</param>
            <param name="list">List of objects to serialize to xml</param>
            <param name="childElement">Name of each child element to create</param>
            <param name="listElement">Name of the list element to contain the child elements, or null to add the child elements directly to the specified <paramref name="element"/></param>
        </member>
        <member name="M:Eto.XmlExtensions.ReadChildListXml``1(System.Xml.XmlElement,System.Collections.Generic.IList{``0},Eto.CreateFromXml{``0},System.String,System.String)">
            <summary>
            Reads child elements into a list, constructing the child objects programatically
            </summary>
            <example>
            <code><![CDATA[
            public class MyChild : IXmlReadable {
            	public static MyChild CreateFromXml (XmlElement element) {
            		switch (element.GetAttribute("type")) {
            			case "typea": return new MyChildTypeA();
            			case "typeb": return new MyChildTypeB();
            			default: return null;
            		}
            	}
            	
            	// implement IXmlReadable (usually as virtual methods for derived classes to override)
            }
            
            public class MyChildTypeA : MyChild {
            }
            
            public class MyChildTypeB : MyChild {
            }
            
            public class MyParent : IXmlReadable {
            
            	public List<MyChild> Children { get; set; }
            	
            	public void WriteXml (XmlElement element) {
            		element.WriteChildListXml<MyChild>(this.Children, "mychild", "children");
            	}
            	
            	public void ReadXml (XmlElement element) {
            		this.Children = new List<MyChild>();
            		element.ReadChildListXml<MyChild>(this.Children, MyChild.CreateFromXml, "mychild", "children");
            	}
            }
            ]]></code>
            </example>
            <typeparam name="T">Type of each child object</typeparam>
            <param name="element">Element to read the child elements from</param>
            <param name="list">List to add the child elements to</param>
            <param name="create">Delegate to create the child object to add to the list</param>
            <param name="childElement">Name of the child elements to read</param>
            <param name="listElement">If specified, the list element where the child elements are to be read from, or null to read the child elements directly from the <paramref name="element"/></param>
        </member>
        <member name="M:Eto.XmlExtensions.ReadChildListXml``1(System.Xml.XmlElement,System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>
            Reads child elements into a list
            </summary>
            <example>
            <code><![CDATA[
            public class MyChild : IXmlReadable {
            	// implement IXmlReadable
            }
            
            public class MyParent : IXmlReadable {
            
            	public List<MyChild> Children { get; set; }
            	
            	public void WriteXml (XmlElement element) {
            		element.WriteChildListXml<MyChild>(this.Children, "mychild", "children");
            	}
            	
            	public void ReadXml (XmlElement element) {
            		this.Children = new List<MyChild>();
            		element.ReadChildListXml<MyChild>(this.Children, "mychild", "children");
            	}
            }
            ]]></code>
            </example>
            <typeparam name="T">Type of each child object</typeparam>
            <param name="element">Element to read the child elements from</param>
            <param name="list">List to add the child elements to</param>
            <param name="childElement">Name of the child elements to read</param>
            <param name="listElement">If specified, the list element where the child elements are to be read from, or null to read the child elements directly from the <paramref name="element"/></param>
        </member>
        <member name="M:Eto.XmlExtensions.SaveXml(Eto.IXmlReadable,System.String,System.String)">
            <summary>
            Saves the specified <see cref="T:Eto.IXmlReadable"/> object to an xml file
            </summary>
            <param name="obj">Object to serialize to xml</param>
            <param name="fileName">File to save as</param>
            <param name="documentElementName">Document element name</param>
        </member>
        <member name="M:Eto.XmlExtensions.SaveXml(Eto.IXmlReadable,System.IO.Stream,System.String)">
            <summary>
            Saves the specified <see cref="T:Eto.IXmlReadable"/> object to an xml stream
            </summary>
            <param name="obj">Object to serialize to xml</param>
            <param name="stream">Stream to save as</param>
            <param name="documentElementName">Document element name</param>
        </member>
        <member name="M:Eto.XmlExtensions.LoadXml(Eto.IXmlReadable,System.String)">
            <summary>
            Loads the specified <see cref="T:Eto.IXmlReadable"/> object from an xml file
            </summary>
            <param name="obj">Object to serialize from xml</param>
            <param name="fileName">File to load from</param>
        </member>
        <member name="M:Eto.XmlExtensions.LoadXml(Eto.IXmlReadable,System.IO.Stream)">
            <summary>
            Loads the specified <see cref="T:Eto.IXmlReadable"/> object from an xml stream
            </summary>
            <param name="obj">Object to serialize from xml</param>
            <param name="stream">Stream to load from</param>
        </member>
        <member name="T:Eto.StyleWidgetHandler`1">
            <summary>
            Delegate to handle styling a widget
            </summary>
            <remarks>
            This allows you to add additional logic or set properties on the widget based on the styles set on the widget.
            </remarks>
            <typeparam name="W">Type of widget to style</typeparam>
            <param name="widget">Widget instance that is being styled</param>
        </member>
        <member name="T:Eto.StyleHandler`1">
            <summary>
            Delegate to handle styling a widget handler
            </summary>
            <remarks>
            This allows you to add additional logic or set properties on the widget and platform-specific control(s)
            based on the styles set on the widget.
            </remarks>
            <typeparam name="H">Type of the handler to style</typeparam>
            <param name="handler">Handler instance that is being styled</param>
        </member>
        <member name="T:Eto.StyleWidgetHandler">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="T:Eto.StyleWidgetControlHandler`2">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="T:Eto.Style">
            <summary>
            Style manager for widgets
            </summary>
            <remarks>
            Styles allow you to attach custom platform-specific logic to a widget.
            In your platform-specific assembly, use Style.Add&lt;H&gt;(string, StyleHandler&lt;H&gt;)
            to add the style logic with the same id.
            
            Typically, your styles will be added in your platform-specific executable,
            before your application is run.
            </remarks>
            <example>
            Style the widget, with no direct access to platform-specifics
            <code><![CDATA[
            Style.Add<Form>("mainForm", widget => {
            	widget.Title = "Hello!";
            });
            ]]></code>
            
            Style based on a platform-specific handler (this is for Mac OS X):
            <code><![CDATA[
            Style.Add<Eto.Platform.Mac.Forms.FormHandler>("mainForm", handler => {
            	handler.Control.CollectionBehavior |= NSWindowCollectionBehavior.FullScreenPrimary;
            });
            Style.Add<Eto.Platform.Mac.Forms.ApplicationHandler>("application", handler => {
            	handler.EnableFullScreen ();
            });
            
            // create the UI (typically this is in your UI library, not in the platform-specific assembly)
            var app = new Application {
            	Style = "application";  // will apply the style here
            };
            
            app.Initialized += delegate {
            	app.MainForm = new Form { Style = "mainForm" }; // apply the mainForm style
            	app.MainForm.Show ();
            };
            
            ]]></code>
            </example>
        </member>
        <member name="M:Eto.Style.Add(System.String,Eto.StyleWidgetHandler)">
            <summary>
            Obsolete. Do not use
            </summary>
        </member>
        <member name="M:Eto.Style.Add``1(System.String,Eto.StyleWidgetHandler{``0})">
            <summary>
            Adds a style for a widget
            </summary>
            <remarks>
            Styling a widget allows you to access the widget, but not the platform-specific controls (in a type-safe way).
            
            Typically, you'd use Style.Add&lt;H&gt;(string, StyleHandler&lt;H&gt;) instead, which will add a style based on the widget handler, which
            will give you direct and type safe access to platform-specifics of the widget.
            </remarks>
            <typeparam name="T">Type of the widget to style</typeparam>
            <param name="style">Identifier of the style</param>
            <param name="handler">Delegate with your logic to style the widget</param>
        </member>
        <member name="M:Eto.Style.Add``2(System.String,Eto.StyleWidgetControlHandler{``0,``1})">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="M:Eto.Style.AddHandler``1(System.String,Eto.StyleHandler{``0})">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="M:Eto.Style.Add``1(System.String,Eto.StyleHandler{``0})">
            <summary>
            Adds a style for a widget handler
            </summary>
            <remarks>
            Styling a widget handler allows you to access both the widget and the platform-specifics for the widget.
            
            To use this, you would have to add a reference to one of the Eto.Platform.*.dll's so that you can utilize
            the platform handler directly.  Typically this would be called before your application is run.
            </remarks>
            <typeparam name="H">Type of the handler that should be styled</typeparam>
            <param name="style">Identifier for the style</param>
            <param name="styleHandler">Delegate with your logic to style the widget and/or platform control</param>
        </member>
        <member name="E:Eto.Style.StyleWidget">
            <summary>
            Event to handle when a widget has being styled
            </summary>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.Generate">
            <summary>
            Generates the layout for the container
            </summary>
            <remarks>
            This is called automatically on the Container's LoadCompleted event, but can be called manually if needed.
            </remarks>
            <exception cref="T:Eto.Forms.DynamicLayout.AlreadyGeneratedException">specifies that the control was already generated</exception>
        </member>
        <member name="T:Eto.Forms.SliderOrientation">
            <summary>
            Enumeration of the orientations available for the <see cref="T:Eto.Forms.Slider"/> control
            </summary>
        </member>
        <member name="F:Eto.Forms.SliderOrientation.Horizontal">
            <summary>
            Slider should be shown in a horizontal orientation
            </summary>
        </member>
        <member name="F:Eto.Forms.SliderOrientation.Vertical">
            <summary>
            Slider should be shown in a vertical orientation
            </summary>
        </member>
        <member name="T:Eto.Forms.CursorType">
            <summary>
            Enumeration of the cursor types supported by the <see cref="T:Eto.Forms.Cursor"/> object
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Default">
            <summary>
            Default cursor, which is usually an arrow but may be different depending on the control
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Arrow">
            <summary>
            Standard arrow cursor
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Crosshair">
            <summary>
            Cursor with a cross hair
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Pointer">
            <summary>
            Pointer cursor, which is usually a hand
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Move">
            <summary>
            All direction move cursor
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.IBeam">
            <summary>
            I-beam cursor for selecting text or placing the text cursor
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.VerticalSplit">
            <summary>
            Vertical sizing cursor
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.HorizontalSplit">
            <summary>
            Horizontal sizing cursor
            </summary>
        </member>
        <member name="T:Eto.Forms.ICursor">
            <summary>
            Platform interface for the <see cref="T:Eto.Forms.Cursor"/> class
            </summary>
        </member>
        <member name="T:Eto.Forms.Cursor">
            <summary>
            Class for a particular Mouse cursor type
            </summary>
            <remarks>
            This can be used to specify a cursor for a particular control
            using <see cref="P:Eto.Forms.Control.Cursor"/>
            </remarks>
        </member>
        <member name="T:Eto.Drawing.PixelFormat">
            <summary>
            Format of bytes used in a <see cref="T:Eto.Drawing.Bitmap"/>
            </summary>
            <remarks>
            The format is important when modifying the bytes directly via <see cref="M:Eto.Drawing.Bitmap.Lock"/>.
            </remarks>
        </member>
        <member name="F:Eto.Drawing.PixelFormat.Format32bppRgb">
            <summary>
            32-bits (4 bytes) per pixel, ordered by an Empty byte in the highest order, followed by Red, Green, and Blue.
            </summary>
        </member>
        <member name="F:Eto.Drawing.PixelFormat.Format24bppRgb">
            <summary>
            24-bits (4 bytes) per pixel, ordered by Red in the highest order, followed by Green, and Blue.
            </summary>
        </member>
        <member name="F:Eto.Drawing.PixelFormat.Format32bppRgba">
            <summary>
            32-bits (4 bytes) per pixel, ordered by an Alpha byte in the highest order, followed by Red, Green, and Blue.
            </summary>
        </member>
        <member name="T:Eto.Drawing.ImageFormat">
            <summary>
            Format of the image to use when saving, loading, etc.
            </summary>
            <remarks>
            The format is typically used only when saving via <see cref="M:Bitmap.Save"/>
            </remarks>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Jpeg">
            <summary>
            Jpeg format
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Bitmap">
            <summary>
            Windows BMP format
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Tiff">
            <summary>
            Tiff format
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Png">
            <summary>
            Portable Network Graphics format
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Gif">
            <summary>
            Graphics Interchange Format
            </summary>
        </member>
        <member name="T:Eto.Drawing.IBitmap">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.Bitmap"/> class
            </summary>
        </member>
        <member name="T:Eto.Drawing.IImage">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.Image"/> class
            </summary>
        </member>
        <member name="P:Eto.Drawing.IImage.Size">
            <summary>
            Gets the size of the image, in pixels
            </summary>
        </member>
        <member name="M:Eto.Drawing.IBitmap.Create(System.String)">
            <summary>
            Create a bitmap from a file
            </summary>
            <param name="fileName">File to load as a bitmap</param>
        </member>
        <member name="M:Eto.Drawing.IBitmap.Create(System.IO.Stream)">
            <summary>
            Create a bitmap from a specified stream
            </summary>
            <param name="stream">Stream to load from the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.IBitmap.Create(System.Int32,System.Int32,Eto.Drawing.PixelFormat)">
            <summary>
            Creates a new bitmap in-memory with the specified format
            </summary>
            <param name="width">Initial width of the bitmap</param>
            <param name="height">Initial height of the bitmap</param>
            <param name="pixelFormat">Format of each of the pixels in the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.IBitmap.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the image to the specified width and height
            </summary>
            <remarks>
            This will scale the existing image to the desired size
            </remarks>
            <param name="width">New width for the resized image</param>
            <param name="height">New height for the resized image</param>
        </member>
        <member name="M:Eto.Drawing.IBitmap.Lock">
            <summary>
            Locks the data of the image to directly access the bytes of the image
            </summary>
            <remarks>
            This locks the data to read and write to directly using unsafe pointers. After reading or updating
            the data, you must call <see cref="M:Eto.Drawing.IBitmap.Unlock(Eto.Drawing.BitmapData)"/> to unlock the data.
            </remarks>
            <returns>A <see cref="T:Eto.Drawing.BitmapData"/> object with information about the locked data</returns>
        </member>
        <member name="M:Eto.Drawing.IBitmap.Unlock(Eto.Drawing.BitmapData)">
            <summary>
            Unlocks the previously locked data
            </summary>
            <remarks>
            This will unlock the data, and in some platforms write the data back to the image.  You must
            call this method before using the bitmap again.
            </remarks>
            <param name="bitmapData">The data previously locked via the <see cref="M:Eto.Drawing.IBitmap.Lock"/> method</param>
        </member>
        <member name="M:Eto.Drawing.IBitmap.Save(System.IO.Stream,Eto.Drawing.ImageFormat)">
            <summary>
            Saves the bitmap to a stream in the specified format
            </summary>
            <param name="stream">Stream to save the bitmap to</param>
            <param name="format">Format to save as</param>
        </member>
        <member name="T:Eto.Drawing.Bitmap">
            <summary>
            Represents an image
            </summary>
            <remarks>
            The Bitmap object
            </remarks>
        </member>
        <member name="T:Eto.Drawing.Image">
            <summary>
            Base class for images
            </summary>
            <remarks>
            This provides a base for image functionality so that drawing and widgets can 
            reference any type of image, if supported.
            For instance, <see cref="T:Eto.Drawing.Graphics"/> and <see cref="T:Eto.Forms.ImageView"/> can reference
            any Image-derived object.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Image.#ctor(Eto.Generator,System.Type)">
            <summary>
            Initializes a new instance of an image with the specified type
            </summary>
            <param name="generator">Generator to create the handler</param>
            <param name="type">Type of the handler to create (must be derived from <see cref="T:Eto.Drawing.IImage"/>)</param>
        </member>
        <member name="M:Eto.Drawing.Image.#ctor(Eto.Generator,Eto.Drawing.IImage)">
            <summary>
            Initializes a new instance of an image with the specified handler instance
            </summary>
            <remarks>
            This is useful when you want to create an image that wraps around an existing instance of the 
            handler. This is typically only done from a platform implementation that returns an image instance.
            </remarks>
            <param name="generator">Generator for the handler</param>
            <param name="handler">Instance of the handler to attach to this instance</param>
        </member>
        <member name="P:Eto.Drawing.Image.Size">
            <summary>
            Gets the size of the image, in pixels
            </summary>
        </member>
        <member name="M:Eto.Drawing.Bitmap.FromResource(System.String)">
            <summary>
            Loads a bitmap from the specified resource in the caller's assembly
            </summary>
            <param name="resourceName">Name of the resource in the caller's assembly to load</param>
            <returns>A new instance of a Bitmap loaded from the specified resource</returns>
        </member>
        <member name="M:Eto.Drawing.Bitmap.FromResource(System.Reflection.Assembly,System.String)">
            <summary>
            Loads a bitmap from the resource in the specified assembly
            </summary>
            <param name="asm">Assembly to load the resource from</param>
            <param name="resourceName">Resource to load in the specified assembly</param>
            <returns>A new instance of the Bitmap loaded from the resource</returns>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.String)">
            <summary>
            Initializes a new instance of a Bitmap from a file
            </summary>
            <param name="fileName">File to load as a bitmap</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of a Bitmap from a stream
            </summary>
            <param name="stream">Stream to load from the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(Eto.Drawing.Size,Eto.Drawing.PixelFormat)">
            <summary>
            Initializes a new instance of a Bitmap with the specified size and format
            </summary>
            <param name="size">Size of the bitmap to create</param>
            <param name="pixelFormat">Format of each pixel</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.Int32,System.Int32,Eto.Drawing.PixelFormat)">
            <summary>
            Initializes a new instance of a Bitmap with the specified size and format
            </summary>
            <param name="width">Width of the new bitmap</param>
            <param name="height">Height of the new bitmap</param>
            <param name="pixelFormat">Format of each pixel</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(Eto.Generator,System.String)">
            <summary>
            Initializes a new instance of a Bitmap from a file
            </summary>
            <param name="generator">Generator to use to create the bitmap</param>
            <param name="fileName">File to load as a bitmap</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(Eto.Generator,System.IO.Stream)">
            <summary>
            Initializes a new instance of a Bitmap from a stream
            </summary>
            <param name="generator">Generator to use to create the bitmap</param>
            <param name="stream">Stream to load from the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(Eto.Generator,System.Int32,System.Int32,Eto.Drawing.PixelFormat)">
            <summary>
            Initializes a new instance of a Bitmap with the specified size and format
            </summary>
            <param name="generator">Generator to use to create the bitmap</param>
            <param name="width">Width of the new bitmap</param>
            <param name="height">Height of the new bitmap</param>
            <param name="pixelFormat">Format of each pixel</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(Eto.Generator,Eto.Drawing.IBitmap)">
            <summary>
            Initializes a new instance of a Bitmap with the specified handler
            </summary>
            <param name="generator">Generator the handler is created from</param>
            <param name="handler">Platform handler to use for this instance</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the image to the specified width and height
            </summary>
            <remarks>
            This will scale the existing image to the desired size
            </remarks>
            <param name="width">New width for the resized image</param>
            <param name="height">New height for the resized image</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.Lock">
            <summary>
            Locks the data of the image to directly access the bytes of the image
            </summary>
            <remarks>
            This locks the data to read and write to directly using unsafe pointers. After reading or updating
            the data, you must call <see cref="M:Eto.Drawing.Bitmap.Unlock(Eto.Drawing.BitmapData)"/> to unlock the data.
            </remarks>
            <returns>A <see cref="T:Eto.Drawing.BitmapData"/> object with information about the locked data</returns>
        </member>
        <member name="M:Eto.Drawing.Bitmap.Unlock(Eto.Drawing.BitmapData)">
            <summary>
            Unlocks the previously locked data
            </summary>
            <remarks>
            This will unlock the data, and in some platforms write the data back to the image.  You must
            call this method before using the bitmap again.
            </remarks>
            <param name="bitmapData">The data previously locked via the <see cref="M:Eto.Drawing.Bitmap.Lock"/> method</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.Save(System.String,Eto.Drawing.ImageFormat)">
            <summary>
            Saves the bitmap to a file in the specified format
            </summary>
            <param name="fileName">File to save the bitmap to</param>
            <param name="format">Format to save as</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.Save(System.IO.Stream,Eto.Drawing.ImageFormat)">
            <summary>
            Saves the bitmap to a stream in the specified format
            </summary>
            <param name="stream">Stream to save the bitmap to</param>
            <param name="format">Format to save as</param>
        </member>
        <member name="T:Eto.Drawing.Color">
            <summary>
            Represents a color with RGBA (Red, Green, Blue, and Alpha) components
            </summary>
        </member>
        <member name="F:Eto.Drawing.Color.Black">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Color.White">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Color.Gray">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Color.LightGray">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Color.Red">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Color.Green">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Color.Blue">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Color.Transparent">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Color.Empty">
            <summary>
            An empty color with zero for all components
            </summary>
        </member>
        <member name="M:Eto.Drawing.Color.#ctor(Eto.Drawing.ColorCMYK)">
            <summary>
            Obsolete, do not use.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Color.#ctor(Eto.Drawing.ColorHSL)">
            <summary>
            Obsolete, do not use.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Color.#ctor(Eto.Drawing.ColorHSB)">
            <summary>
            Obsolete, do not use.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Color.FromArgb(System.UInt32)">
            <summary>
            Creates a Color from a 32-bit ARGB value
            </summary>
            <param name="argb">32-bit ARGB value with Alpha in the high byte</param>
            <returns>A new instance of the Color object with the specified color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.FromGrayscale(System.Single,System.Single)">
            <summary>
            Creates a Color with a specified value for the Red, Green, and Blue components
            </summary>
            <param name="val">Value for each RGB component</param>
            <param name="alpha">Alpha value</param>
            <returns>A new instance of the Color object with the specified grayscale color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.Distance(Eto.Drawing.Color,Eto.Drawing.Color)">
            <summary>
            Calculates the distance of the two colors in the RGB scale
            </summary>
            This is useful for comparing two different color values to determine if they are similar.
            
            Typically though, <see cref="M:Eto.Drawing.ColorHSL.Distance(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)"/> gives the best result instead of using the RGB method.
            <param name="value1">First color to compare</param>
            <param name="value2">Second color to compare with</param>
            <returns>The overall distance/difference between the two colours. A lower value indicates a closer match</returns>
        </member>
        <member name="M:Eto.Drawing.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Color object with the specified red, green, blue, and alpha components
            </summary>
            <param name="red">Red component (0-1)</param>
            <param name="green">Green component (0-1)</param>
            <param name="blue">Blue component (0-1)</param>
            <param name="alpha">Alpha component (0-1)</param>
        </member>
        <member name="M:Eto.Drawing.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Color object with the specified red, green, blue, and alpha components
            </summary>
            <param name="red">Red component (0-255)</param>
            <param name="green">Green component (0-255)</param>
            <param name="blue">Blue component (0-255)</param>
            <param name="alpha">Alpha component (0-255)</param>
        </member>
        <member name="M:Eto.Drawing.Color.TryParse(System.String,Eto.Drawing.Color@,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified string to a color
            </summary>
            <remarks>
            The string can be any of these formats:
            	- #AARRGGBB or #RRGGBB  (where ARGB are hex values)
            	- 0xAARRGGBB or 0xRRGGBB
            	- [named] (where [named] is a name of one of the properties in <see cref="T:Eto.Drawing.Colors"/>)
            	- [uint]  (where [uint] is a base-10 ARGB value)
            	- [red], [green], [blue] (where each component is a value from 0-255)
            	- [alpha], [red], [green], [blue]  (where each component is a value from 0-255)
            	
            If the string is null or empty, this will return <see cref="P:Eto.Drawing.Colors.Transparent"/>
            </remarks>
            <param name="value">String value to parse</param>
            <param name="color">Color struct with the parsed value, or Transparent if value is invalid</param>
            <param name="culture">Culture to use to parse the values</param>
            <returns>True if the value was successfully parsed into a color, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Color.Equals(System.Object)">
            <summary>
            Tests if the specified object has the same value as this Color
            </summary>
            <param name="obj">Color to compare with</param>
            <returns>True if the specified object is a Color and has the same ARGB components as this color, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Color.GetHashCode">
            <summary>
            Gets the hash code for this Color
            </summary>
            <returns>Hash code for the color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.op_Equality(Eto.Drawing.Color,Eto.Drawing.Color)">
            <summary>
            Compares two Color structs for equality
            </summary>
            <param name="color1">The first Color struct to compare</param>
            <param name="color2">The second Color struct to compare</param>
            <returns>True if both the Color structs have the same values for all ARGB components</returns>
        </member>
        <member name="M:Eto.Drawing.Color.op_Inequality(Eto.Drawing.Color,Eto.Drawing.Color)">
            <summary>
            Compares two Color structs for inequality
            </summary>
            <param name="color1">The first Color struct to compare</param>
            <param name="color2">The second Color struct to compare</param>
            <returns>True if the Color structs have a differing value for any of the ARGB components</returns>
        </member>
        <member name="M:Eto.Drawing.Color.Invert">
            <summary>
            Inverts the RGB color values
            </summary>
            <remarks>
            This inverts the color components (other than the alpha component) by making them
            equal to the 1 minus the component's value.  This is useful for when you want to show
            a highlighted color but still show the variation in colors.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Color.ToArgb">
            <summary>
            Converts this color to a 32-bit ARGB value.
            </summary>
            <returns>The 32-bit ARGB value that corresponds to this color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.ToHex(System.Boolean)">
            <summary>
            Converts this color to a hex representation
            </summary>
            <remarks>
            This will either return a hex value with 8 digits (two per component), or 6 digits (two per RGB) if the <paramref name="includeAlpha"/> is set to false.
            </remarks>
            <param name="includeAlpha">True to include the alpha component, false to exclude it</param>
            <returns>A hex representation of this color, with 8 digits if <paramref name="includeAlpha"/> is true, or 6 digits if false</returns>
        </member>
        <member name="M:Eto.Drawing.Color.ToString">
            <summary>
            Converts this object to a string
            </summary>
            <remarks>
            This just calls <see cref="M:Eto.Drawing.Color.ToHex(System.Boolean)"/>
            </remarks>
            <returns>A string representation of this object</returns>
        </member>
        <member name="M:Eto.Drawing.Color.Equals(Eto.Drawing.Color)">
            <summary>
            Compares the specified color for equality
            </summary>
            <param name="other">Other color to determine equality</param>
            <returns>True if all components of the specified color are equal to this object</returns>
        </member>
        <member name="P:Eto.Drawing.Color.IsEmpty">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="P:Eto.Drawing.Color.A">
            <summary>
            Gets or sets the alpha/opacity (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Color.R">
            <summary>
            Gets or sets the red component (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Color.G">
            <summary>
            Gets or sets the green (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Color.B">
            <summary>
            Gets or sets the blue (0-1)
            </summary>
        </member>
        <member name="T:Eto.Drawing.FontFamily">
            <summary>
            Enumeration of the standard Font Families for a <see cref="T:Eto.Drawing.Font"/>
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontFamily.Monospace">
            <summary>
            Font family with each character having the same width
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontFamily.Sans">
            <summary>
            Font family with no serifs (e.g. Arial, Helvetica, etc)
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontFamily.Serif">
            <summary>
            Font family with serifs (e.g. Times New Roman, etc)
            </summary>
        </member>
        <member name="T:Eto.Drawing.SystemFont">
            <summary>
            Enumeration of the different system fonts for a <see cref="T:Eto.Drawing.Font"/>
            </summary>
            <remarks>
            This is useful when you want to use a font that is the same as standard UI elements.
            </remarks>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Default">
            <summary>
            Default system font
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Bold">
            <summary>
            Default system font in BOLD
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Label">
            <summary>
            Default label font
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.TitleBar">
            <summary>
            Default title bar font (window title)
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.ToolTip">
            <summary>
            Default tool top font
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.MenuBar">
            <summary>
            Default menu bar font
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Menu">
            <summary>
            Default font for items in a menu
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Message">
            <summary>
            Default font for message boxes
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Palette">
            <summary>
            Default font for palette dialogs
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.StatusBar">
            <summary>
            Default font for status bars
            </summary>
        </member>
        <member name="T:Eto.Drawing.FontStyle">
            <summary>
            Syles for a <see cref="T:Eto.Drawing.Font"/>
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontStyle.Normal">
            <summary>
            Normal font style that is neither bold or italic
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontStyle.Bold">
            <summary>
            Bold font style
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontStyle.Italic">
            <summary>
            Italic font style
            </summary>
        </member>
        <member name="T:Eto.Drawing.IFont">
            <summary>
            Platform handler for the <see cref="T:Eto.Drawing.Font"/> class
            </summary>
        </member>
        <member name="M:Eto.Drawing.IFont.Create(Eto.Drawing.FontFamily,System.Single,Eto.Drawing.FontStyle)">
            <summary>
            Creates a new font object
            </summary>
            <param name="family">Type of font family</param>
            <param name="size">Size of the font (in points)</param>
            <param name="style">Style of the font</param>
        </member>
        <member name="M:Eto.Drawing.IFont.Create(Eto.Drawing.SystemFont,System.Nullable{System.Single})">
            <summary>
            Creates a new font object with the specified <paramref name="systemFont"/> and optional size
            </summary>
            <param name="systemFont">System font to create</param>
            <param name="size">Size of font to use, or null to use the system font's default size</param>
        </member>
        <member name="P:Eto.Drawing.IFont.Bold">
            <summary>
            Gets a value indicating that this font has a bold style
            </summary>
        </member>
        <member name="P:Eto.Drawing.IFont.Italic">
            <summary>
            Gets a value indicating that this font has an italic style
            </summary>
        </member>
        <member name="P:Eto.Drawing.IFont.Size">
            <summary>
            Gets the size of the font in points
            </summary>
        </member>
        <member name="T:Eto.Drawing.Font">
            <summary>
            Defines a format for text
            </summary>
        </member>
        <member name="M:Eto.Drawing.Font.#ctor(Eto.Drawing.FontFamily,System.Single,Eto.Drawing.FontStyle)">
            <summary>
            Creates a new instance of the Font class with a specified <paramref name="family"/>, <paramref name="size"/>, and <paramref name="style"/>
            </summary>
            <param name="family">Family of font to use</param>
            <param name="size">Size of the font, in points</param>
            <param name="style">Style of the font</param>
        </member>
        <member name="M:Eto.Drawing.Font.#ctor(Eto.Generator,Eto.Drawing.FontFamily,System.Single,Eto.Drawing.FontStyle)">
            <summary>
            Creates a new instance of the Font class with a specified <paramref name="family"/>, <paramref name="size"/>, and <paramref name="style"/>
            </summary>
            <param name="generator">Generator to create the font for</param>
            <param name="family">Family of font to use</param>
            <param name="size">Size of the font, in points</param>
            <param name="style">Style of the font</param>
        </member>
        <member name="M:Eto.Drawing.Font.#ctor(Eto.Drawing.SystemFont,System.Nullable{System.Single})">
            <summary>
            Creates a new instance of the Font class with a specified <paramref name="systemFont"/> and optional custom <paramref name="size"/>
            </summary>
            <remarks>
            The system fonts are the same fonts that the standard UI of each platform use for particular areas
            given the <see cref="T:Eto.Drawing.SystemFont"/> enumeration.
            </remarks>
            <param name="systemFont">Type of system font to create</param>
            <param name="size">Optional size of the font, in points. If not specified, the default size of the system font is used</param>
        </member>
        <member name="M:Eto.Drawing.Font.#ctor(Eto.Generator,Eto.Drawing.SystemFont,System.Nullable{System.Single})">
            <summary>
            Creates a new instance of the Font class with a specified <paramref name="systemFont"/> and optional custom <paramref name="size"/>
            </summary>
            <remarks>
            The system fonts are the same fonts that the standard UI of each platform use for particular areas
            given the <see cref="T:Eto.Drawing.SystemFont"/> enumeration.
            </remarks>
            <param name="generator">Generator to create the font for</param>
            <param name="systemFont">Type of system font to create</param>
            <param name="size">Optional size of the font, in points. If not specified, the default size of the system font is used</param>
        </member>
        <member name="P:Eto.Drawing.Font.Size">
            <summary>
            Gets the size, in points, of this font
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.Bold">
            <summary>
            Gets a value indicating that this font has a bold style
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.Italic">
            <summary>
            Gets a value indicating that this font has an italic style
            </summary>
        </member>
        <member name="T:Eto.Drawing.ImageInterpolation">
            <summary>
            Interpolation modes when drawing images using the <see cref="T:Eto.Drawing.Graphics"/> object
            </summary>
            <seealso cref="P:Eto.Drawing.Graphics.ImageInterpolation"/>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.Default">
            <summary>
            Default interplation mode - usually a balance between quality vs. performance
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.None">
            <summary>
            No interpolation (also known as nearest neighbour)
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.Low">
            <summary>
            Low interpolation quality (usually fastest)
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.Medium">
            <summary>
            Medium interpolation quality slower than <see cref="F:Eto.Drawing.ImageInterpolation.Low"/>, but better quality
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.High">
            <summary>
            Highest interpolation quality - slowest but best quality
            </summary>
        </member>
        <member name="T:Eto.Drawing.IGraphics">
            <summary>
            Platform handler interface for the <see cref="T:Eto.Drawing.Graphics"/> class
            </summary>
        </member>
        <member name="M:Eto.Drawing.IGraphics.CreateFromImage(Eto.Drawing.Bitmap)">
            <summary>
            Creates the graphics object for drawing on the specified <paramref name="image"/>
            </summary>
            <param name="image">Image to perform drawing operations on</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.DrawRectangle(Eto.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle outline
            </summary>
            <param name="color">Color for the outline</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.DrawLine(Eto.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color for the outline</param>
            <param name="startx">X co-ordinate of the starting point</param>
            <param name="starty">Y co-ordinate of the starting point</param>
            <param name="endx">X co-ordinate of the ending point</param>
            <param name="endy">Y co-ordinate of the ending point</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.FillRectangle(Eto.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a rectangle with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.FillEllipse(Eto.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="x">X co-ordinate of the left side of the ellipse</param>
            <param name="y">Y co-ordinate of the top of the ellipse</param>
            <param name="width">Width of the ellipse</param>
            <param name="height">Height of the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.DrawEllipse(Eto.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an outline of an ellipse with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="x">X co-ordinate of the left side of the ellipse</param>
            <param name="y">Y co-ordinate of the top of the ellipse</param>
            <param name="width">Width of the ellipse</param>
            <param name="height">Height of the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.FillPath(Eto.Drawing.Color,Eto.Drawing.GraphicsPath)">
            <summary>
            Fills the specified <paramref name="path"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="path">Path to fill</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.DrawPath(Eto.Drawing.Color,Eto.Drawing.GraphicsPath)">
            <summary>
            Draws the specified <paramref name="path"/>
            </summary>
            <param name="color">Draw color</param>
            <param name="path">Path to draw</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.DrawImage(Eto.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Draws the specified <paramref name="image"/> at a location with no scaling
            </summary>
            <param name="image">Image to draw</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.DrawImage(Eto.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the specified <paramref name="image"/> in a rectangle
            </summary>
            <remarks>
            This will scale the image to the specified width and height using the <see cref="P:Eto.Drawing.IGraphics.ImageInterpolation"/> mode
            </remarks>
            <param name="image">Image to draw</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Destination width of the image to draw</param>
            <param name="height">Destination height of the image to draw</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.DrawImage(Eto.Drawing.Image,Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Draws the <paramref name="source"/> portion of an <paramref name="image"/>, scaling to the specified <paramref name="destination"/>
            </summary>
            <param name="image">Image to draw</param>
            <param name="source">Source rectangle of the image portion to draw</param>
            <param name="destination">Destination rectangle of where to draw the portion</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.DrawIcon(Eto.Drawing.Icon,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the <paramref name="icon"/> at the specified location and size
            </summary>
            <param name="icon">Icon to draw</param>
            <param name="x">X co-ordinate of the location to draw the icon</param>
            <param name="y">Y co-ordinate of the location to draw the icon</param>
            <param name="width">Destination width of the icon</param>
            <param name="height">Destination height of the icon</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.DrawText(Eto.Drawing.Font,Eto.Drawing.Color,System.Int32,System.Int32,System.String)">
            <summary>
            Draws text with the specified <paramref name="font"/>, <paramref name="color"/> and location
            </summary>
            <param name="font">Font to draw the text with</param>
            <param name="color">Color of the text</param>
            <param name="x">X co-ordinate of where to start drawing the text</param>
            <param name="y">Y co-ordinate of where to start drawing the text</param>
            <param name="text">Text string to draw</param>
        </member>
        <member name="M:Eto.Drawing.IGraphics.MeasureString(Eto.Drawing.Font,System.String)">
            <summary>
            Measures the string with the given <paramref name="font"/>
            </summary>
            <param name="font">Font to measure with</param>
            <param name="text">Text string to measure</param>
            <returns>Size representing the dimensions of the entire text would take to draw given the specified <paramref name="font"/></returns>
        </member>
        <member name="M:Eto.Drawing.IGraphics.Flush">
            <summary>
            Flushes the drawing (for some platforms)
            </summary>
            <remarks>
            Flushing the drawing will force any undrawn changes to be shown to the user.  Typically when you are doing
            a lot of drawing, you may want to flush the changed periodically so that the user does not think the UI is unresponsive.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.IGraphics.ClipRegion">
            <summary>
            Not yet implemented
            </summary>
        </member>
        <member name="P:Eto.Drawing.IGraphics.Antialias">
            <summary>
            Gets or sets a value indicating that drawing operations will use antialiasing
            </summary>
        </member>
        <member name="P:Eto.Drawing.IGraphics.ImageInterpolation">
            <summary>
            Gets or sets the interpolation mode for drawing images
            </summary>
        </member>
        <member name="T:Eto.Drawing.Graphics">
            <summary>
            Graphics context object for drawing operations
            </summary>
            <remarks>
            This class allows you to draw on either a <see cref="T:Eto.Drawing.Bitmap"/> or a <see cref="T:Eto.Forms.Drawable"/> control.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Graphics.#ctor(Eto.Generator,Eto.Drawing.IGraphics)">
            <summary>
            Initializes a new instance of the Graphics class with the specified platform <paramref name="handler"/>
            </summary>
            <param name="generator">Generator for this instance</param>
            <param name="handler">Platform handler to use for this instance</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.#ctor(Eto.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the Generator class to draw on the given <paramref name="image"/>
            </summary>
            <param name="image">Image to draw on using this graphics context</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.#ctor(Eto.Generator,Eto.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the Generator class to draw on the given <paramref name="image"/>
            </summary>
            <param name="generator">Generator to create this graphics context for</param>
            <param name="image">Image to draw on using this graphics context</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLine(Eto.Drawing.Color,Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Draws a line with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color for the outline</param>
            <param name="start">Starting location</param>
            <param name="end">Ending location</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLine(Eto.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color for the outline</param>
            <param name="startx">X co-ordinate of the starting point</param>
            <param name="starty">Y co-ordinate of the starting point</param>
            <param name="endx">X co-ordinate of the ending point</param>
            <param name="endy">Y co-ordinate of the ending point</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawRectangle(Eto.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle
            </summary>
            <param name="color">Color for the outline</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawRectangle(Eto.Drawing.Color,Eto.Drawing.Rectangle)">
            <summary>
            Draws a rectangle
            </summary>
            <param name="color">Color for the outline</param>
            <param name="rectangle">Where to draw the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawInsetRectangle(Eto.Drawing.Color,Eto.Drawing.Color,Eto.Drawing.Rectangle,System.Int32)">
            <summary>
            Draws an rectangle with colors on the top/left and bottom/right with the given <paramref name="width"/>
            </summary>
            <param name="topLeftColor">Color for top/left edges</param>
            <param name="bottomRightColor">Color for bottom/right edges</param>
            <param name="rectangle">Outside of inset rectangle to draw</param>
            <param name="width">Width of the rectangle, in pixels</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillRectangle(Eto.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a rectangle with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillRectangle(Eto.Drawing.Color,Eto.Drawing.Rectangle)">
            <summary>
            Fills a rectangle with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="rectangle">Location for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillRectangles(Eto.Drawing.Color,System.Collections.Generic.IEnumerable{Eto.Drawing.Rectangle})">
            <summary>
            Fills the specified <paramref name="rectangles"/>
            </summary>
            <param name="color">Color to fill the rectangles</param>
            <param name="rectangles">Enumeration of rectangles to fill</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillEllipse(Eto.Drawing.Color,Eto.Drawing.Rectangle)">
            <summary>
            Fills an ellipse with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="rectangle">Location for the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawEllipse(Eto.Drawing.Color,Eto.Drawing.Rectangle)">
            <summary>
            Draws an ellipse outline with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color to outline the ellipse</param>
            <param name="rectangle">Location for the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPolygon(Eto.Drawing.Color,System.Collections.Generic.IEnumerable{Eto.Drawing.Point})">
            <summary>
            Fills a polygon defined by <paramref name="points"/> with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="points">Points of the polygon</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawPolygon(Eto.Drawing.Color,System.Collections.Generic.IEnumerable{Eto.Drawing.Point})">
            <summary>
            Draws a polygon with the specified <paramref name="points"/>
            </summary>
            <param name="color">Color to draw the polygon lines</param>
            <param name="points">Points of the polygon</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPath(Eto.Drawing.Color,Eto.Drawing.GraphicsPath)">
            <summary>
            Fills the specified <paramref name="path"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="path">Path to fill</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawPath(Eto.Drawing.Color,Eto.Drawing.GraphicsPath)">
            <summary>
            Draws the specified <paramref name="path"/>
            </summary>
            <param name="color">Draw color</param>
            <param name="path">Path to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,Eto.Drawing.Point)">
            <summary>
            Draws the specified <paramref name="image"/> at a location with no scaling
            </summary>
            <param name="image">Image to draw</param>
            <param name="location">Location to draw the image</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Draws the specified <paramref name="image"/> at a location with no scaling
            </summary>
            <param name="image">Image to draw</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the specified <paramref name="image"/> in a rectangle
            </summary>
            <remarks>
            This will scale the image to the specified width and height using the <see cref="P:Eto.Drawing.Graphics.ImageInterpolation"/> mode
            </remarks>
            <param name="image">Image to draw</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Destination width of the image to draw</param>
            <param name="height">Destination height of the image to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,Eto.Drawing.Rectangle)">
            <summary>
            Draws the specified <paramref name="image"/> in a rectangle
            </summary>
            <remarks>
            This will scale the image to the specified width and height using the <see cref="P:Eto.Drawing.Graphics.ImageInterpolation"/> mode
            </remarks>
            <param name="image">Image to draw</param>
            <param name="rectangle">Where to draw the image</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,Eto.Drawing.Rectangle,Eto.Drawing.Point)">
            <summary>
            Draws the <paramref name="source"/> portion of an <paramref name="image"/>, scaling to the specified <paramref name="destination"/>
            </summary>
            <param name="image">Image to draw</param>
            <param name="source">Source rectangle of the image portion to draw</param>
            <param name="destination">Destination rectangle of where to draw the portion</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Draws the <paramref name="source"/> portion of an <paramref name="image"/>, scaling to the specified <paramref name="destination"/>
            </summary>
            <param name="image">Image to draw</param>
            <param name="source">Source rectangle of the image portion to draw</param>
            <param name="destination">Destination rectangle of where to draw the portion</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawIcon(Eto.Drawing.Icon,Eto.Drawing.Rectangle)">
            <summary>
            Draws the <paramref name="icon"/> at the specified location and size
            </summary>
            <param name="icon">Icon to draw</param>
            <param name="rectangle">Where to draw the icon</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawIcon(Eto.Drawing.Icon,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the <paramref name="icon"/> at the specified location and size
            </summary>
            <param name="icon">Icon to draw</param>
            <param name="x">X co-ordinate of the location to draw the icon</param>
            <param name="y">Y co-ordinate of the location to draw the icon</param>
            <param name="width">Destination width of the icon</param>
            <param name="height">Destination height of the icon</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawText(Eto.Drawing.Font,Eto.Drawing.Color,System.Int32,System.Int32,System.String)">
            <summary>
            Draws text with the specified <paramref name="font"/>, <paramref name="color"/> and location
            </summary>
            <param name="font">Font to draw the text with</param>
            <param name="color">Color of the text</param>
            <param name="x">X co-ordinate of where to start drawing the text</param>
            <param name="y">Y co-ordinate of where to start drawing the text</param>
            <param name="text">Text string to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawText(Eto.Drawing.Font,Eto.Drawing.Color,Eto.Drawing.Point,System.String)">
            <summary>
            Draws text with the specified <paramref name="font"/>, <paramref name="color"/> and location
            </summary>
            <param name="font">Font to draw the text with</param>
            <param name="color">Color of the text</param>
            <param name="location">Location of where to start drawing the text</param>
            <param name="text">Text string to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.MeasureString(Eto.Drawing.Font,System.String)">
            <summary>
            Measures the string with the given <paramref name="font"/>
            </summary>
            <param name="font">Font to measure with</param>
            <param name="text">Text string to measure</param>
            <returns>Size representing the dimensions of the entire text would take to draw given the specified <paramref name="font"/></returns>
        </member>
        <member name="M:Eto.Drawing.Graphics.Flush">
            <summary>
            Flushes the drawing (for some platforms)
            </summary>
            <remarks>
            Flushing the drawing will force any undrawn changes to be shown to the user.  Typically when you are doing
            a lot of drawing, you may want to flush the changed periodically so that the user does not think the UI is unresponsive.
            
            Some platforms may not have the concept of flushing the graphics, so this would do nothing
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Graphics.Antialias">
            <summary>
            Gets or sets a value indicating that drawing operations will use antialiasing
            </summary>
        </member>
        <member name="P:Eto.Drawing.Graphics.ClipRegion">
            <summary>
            Not yet implemented
            </summary>
        </member>
        <member name="P:Eto.Drawing.Graphics.ImageInterpolation">
            <summary>
            Gets or sets the interpolation mode for drawing images
            </summary>
        </member>
        <member name="T:Eto.Drawing.IIcon">
            <summary>
            Platform handler for the <see cref="T:Eto.Drawing.Icon"/> class
            </summary>
        </member>
        <member name="M:Eto.Drawing.IIcon.Create(System.IO.Stream)">
            <summary>
            Called when creating an instance from a stream
            </summary>
            <param name="stream">Stream to load the icon from</param>
        </member>
        <member name="M:Eto.Drawing.IIcon.Create(System.String)">
            <summary>
            Called when creating an instance from a file name
            </summary>
            <param name="fileName">File name to load the icon from</param>
        </member>
        <member name="T:Eto.Drawing.Icon">
            <summary>
            Represents an icon which allows for multiple sizes of an image
            </summary>
            <remarks>
            The formats supported vary by platform, however all platforms do support loadin windows .ico format.
            
            Using an icon for things like menus, toolbars, etc are preferred so that each platform can use the appropriate
            sized image.
            
            For HiDPI/Retina displays (e.g. on OS X), this will allow using a higher resolution image automatically.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(Eto.Generator,Eto.Drawing.IIcon)">
            <summary>
            Initializes a new instance of the Icon class with the specified handler
            </summary>
            <param name="generator">Generator for this widget</param>
            <param name="handler">Handler for the icon backend</param>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the Icon class with the contents of the specified <paramref name="stream"/>
            </summary>
            <param name="stream">Stream to load the content from</param>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(System.String)">
            <summary>
            Intitializes a new instanc of the Icon class with the contents of the specified <paramref name="fileName"/>
            </summary>
            <param name="fileName">Name of the file to loat the content from</param>
        </member>
        <member name="M:Eto.Drawing.Icon.FromResource(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an icon from an embedded resource of the specified assembly
            </summary>
            <param name="assembly">Assembly to load the resource from</param>
            <param name="resourceName">Fully qualified name of the resource to load</param>
            <returns>A new instance of an Icon loaded with the contents of the specified resource</returns>
        </member>
        <member name="M:Eto.Drawing.Icon.FromResource(System.String)">
            <summary>
            Loads an icon from an embedded resource of the caller's assembly
            </summary>
            <remarks>
            This is a shortcut for <see cref="M:Eto.Drawing.Icon.FromResource(System.Reflection.Assembly,System.String)"/> where it will
            use the caller's assembly to load the resource from
            </remarks>
            <param name="resourceName">Fully qualified name of the resource to load</param>
            <returns>A new instance of an Icon loaded with the contents of the specified resource</returns>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="T:Eto.Drawing.IIndexedBitmap">
            <summary>
            Handler for the <see cref="T:Eto.Drawing.IndexedBitmap"/> class
            </summary>
        </member>
        <member name="M:Eto.Drawing.IIndexedBitmap.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new indexed bitmap with the specified size and bits per pixel
            </summary>
            <param name="width">Width in pixels of the bitmap</param>
            <param name="height">Height in pixels of the bitmap</param>
            <param name="bitsPerPixel">Number of bits per pixel, usually 4 (16 colours), 8 (64 colours), or 8 (256 colours)</param>
        </member>
        <member name="M:Eto.Drawing.IIndexedBitmap.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the bitmap to the specified size
            </summary>
            <param name="width">New width of the bitmap</param>
            <param name="height">New height of the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.IIndexedBitmap.Lock">
            <summary>
            Locks the bits of the bitmap for direct manipulation
            </summary>
            <remarks>
            Note you must call <see cref="M:Eto.Drawing.IIndexedBitmap.Unlock(Eto.Drawing.BitmapData)"/> after modifying the bitmap data
            </remarks>
            <returns>A BitmapData object that carries a pointer and functions for manipulating the data directly</returns>
        </member>
        <member name="M:Eto.Drawing.IIndexedBitmap.Unlock(Eto.Drawing.BitmapData)">
            <summary>
            Unlocks the bits of the bitmap
            </summary>
            <param name="bitmapData">Instance of the bitmap data retrieved from the <see cref="M:Eto.Drawing.IIndexedBitmap.Lock"/> method</param>
        </member>
        <member name="P:Eto.Drawing.IIndexedBitmap.Palette">
            <summary>
            Gets or sets the palette of the image
            </summary>
        </member>
        <member name="T:Eto.Drawing.IndexedBitmap">
            <summary>
            Represents a bitmap where each pixel is specified as an index in a <see cref="P:Eto.Drawing.IndexedBitmap.Palette"/>
            </summary>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the IndexedBitmap class
            </summary>
            <param name="width">Width of the bitmap in pixels</param>
            <param name="height">Height of the bitmap in pixels</param>
            <param name="bitsPerPixel">Number of bits per pixel, usually 4 (16 colours), 8 (64 colours), or 8 (256 colours)</param>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.#ctor(Eto.Generator,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the IndexedBitmap class
            </summary>
            <param name="generator">Generator to use for the handler</param>
            <param name="width">Width of the bitmap in pixels</param>
            <param name="height">Height of the bitmap in pixels</param>
            <param name="bitsPerPixel">Number of bits per pixel, usually 4 (16 colours), 8 (64 colours), or 8 (256 colours)</param>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the bitmap to the specified size
            </summary>
            <param name="width">New width of the bitmap</param>
            <param name="height">New height of the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.Lock">
            <summary>
            Locks the bits of the bitmap for direct manipulation
            </summary>
            <remarks>
            Note you must call <see cref="M:Eto.Drawing.IndexedBitmap.Unlock(Eto.Drawing.BitmapData)"/> after modifying the bitmap data
            </remarks>
            <returns>A BitmapData object that carries a pointer and functions for manipulating the data directly</returns>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.Unlock(Eto.Drawing.BitmapData)">
            <summary>
            Unlocks the bits of the bitmap
            </summary>
            <param name="bitmapData">Instance of the bitmap data retrieved from the <see cref="M:Eto.Drawing.IndexedBitmap.Lock"/> method</param>
        </member>
        <member name="P:Eto.Drawing.IndexedBitmap.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for this bitmap
            </summary>
        </member>
        <member name="P:Eto.Drawing.IndexedBitmap.Palette">
            <summary>
            Gets or sets the palette of the image
            </summary>
            <remarks>
            Note that the number of colors in the palette must match the number of colors specified by the bits per pixel of this bitmap
            </remarks>
        </member>
        <member name="T:Eto.Drawing.Padding">
            <summary>
            Represents an amount of padding to apply to an object at the top, left, right, and bottom.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Padding.Empty">
            <summary>
            Gets an empty padding with zero for each side
            </summary>
        </member>
        <member name="M:Eto.Drawing.Padding.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Padding class with the specified padding for all sides
            </summary>
            <param name="all">Amount of padding to apply to each side</param>
        </member>
        <member name="M:Eto.Drawing.Padding.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Padding class with the specified padding for horizontal and vertical sides
            </summary>
            <param name="horizontal">Amount of padding to set the <see cref="P:Eto.Drawing.Padding.Left"/> and <see cref="P:Eto.Drawing.Padding.Right"/> sides</param>
            <param name="vertical">Amount of padding to set the <see cref="P:Eto.Drawing.Padding.Top"/> and <see cref="P:Eto.Drawing.Padding.Bottom"/> sides</param>
        </member>
        <member name="M:Eto.Drawing.Padding.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Padding class
            </summary>
            <param name="left">Amount of padding to apply to the left</param>
            <param name="top">Amount of padding to apply to the top</param>
            <param name="right">Amount of padding to apply to the right</param>
            <param name="bottom">Amount of padding to apply to the bottom</param>
        </member>
        <member name="M:Eto.Drawing.Padding.op_Equality(Eto.Drawing.Padding,Eto.Drawing.Padding)">
            <summary>
            Determines the equality of two padding objects
            </summary>
            <param name="value1">First padding value to compare</param>
            <param name="value2">Second padding value to compare</param>
            <returns>True if the two padding values are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.op_Inequality(Eto.Drawing.Padding,Eto.Drawing.Padding)">
            <summary>
            Determines the inequality of two padding objects
            </summary>
            <param name="value1">First padding value to compare</param>
            <param name="value2">Second padding value to compare</param>
            <returns>True if the values are not equal, false if they are equal</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.Equals(System.Object)">
            <summary>
            Determines the equality between this instance and the specified object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if obj is a Padding object and is equal to this instance, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.GetHashCode">
            <summary>
            Gets the hash code for this Padding instance
            </summary>
            <returns>Hash code for this instance</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.ToString">
            <summary>
            Converts this object to a string
            </summary>
            <returns>String representation of this object</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.Equals(Eto.Drawing.Padding)">
            <summary>
            Determines equality between this instance and the specified padding
            </summary>
            <param name="other">Other padding instance to compare with</param>
            <returns>True if the specified padding is equal to this instance, false if not</returns>
        </member>
        <member name="P:Eto.Drawing.Padding.Top">
            <summary>
            Gets or sets the padding on the top
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Left">
            <summary>
            Gets or sets the padding on the left
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Right">
            <summary>
            Gets or sets the padding on the right
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Bottom">
            <summary>
            Gets or sets the padding on the bottom
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Horizontal">
            <summary>
            Gets the total horizontal padding, which is the sum of <see cref="P:Eto.Drawing.Padding.Left"/> and <see cref="P:Eto.Drawing.Padding.Right"/>.
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Vertical">
            <summary>
            Gets the total vertical padding, which is the sum of <see cref="P:Eto.Drawing.Padding.Top"/> and <see cref="P:Eto.Drawing.Padding.Bottom"/>
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Size">
            <summary>
            Gets the padding as a size value with the <see cref="P:Eto.Drawing.Padding.Horizontal"/> and <see cref="P:Eto.Drawing.Padding.Vertical"/> values as 
            the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/>, respectively.
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.IsZero">
            <summary>
            Gets a value indicating that all sides of the padding are zero
            </summary>
        </member>
        <member name="T:Eto.Drawing.Palette">
            <summary>
            Represents a collection of <see cref="T:Eto.Drawing.Color"/> objects
            </summary>
            <remarks>
            Typically used for <see cref="T:Eto.Drawing.IndexedBitmap"/> or other purposes where a collection of colors is needed.
            
            This class keeps a cache of 32-bit ARGB values for each element in the collection for faster retrieval. These
            values are generated using <see cref="M:Eto.Drawing.Color.ToArgb"/>.
            </remarks>
        </member>
        <member name="F:Eto.Drawing.Palette.EGAColors">
            <summary>
            Gets the index of standard EGA colors from a 64-color palette
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.GenerateRGBColor(Eto.Drawing.Color)">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.#ctor">
            <summary>
            Initializes a new instance of the Pallette class
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.#ctor(System.Collections.Generic.IEnumerable{Eto.Drawing.Color})">
            <summary>
            Initializes a new instance of the Palette class with the specified colors
            </summary>
            <param name="colors">Initial colors to add to the palette</param>
        </member>
        <member name="M:Eto.Drawing.Palette.GetEgaPalette">
            <summary>
            Gets the standard 64-color EGA palette
            </summary>
            <remarks>
            To get the standard 16-colors of an EGA palette, use <see cref="M:Eto.Drawing.Palette.FromEGA(Eto.Drawing.Palette)"/>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Eto.Drawing.Palette.GetDosPalette">
            <summary>
            Gets the standard 16-color palette used in DOS
            </summary>
            <returns>A new instance of a Palette with the standard 16 DOS colors</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.FromEGA(Eto.Drawing.Palette)">
            <summary>
            Gets the standard 16 colors of the specified EGA palette, at the indexes specified with <see cref="F:Eto.Drawing.Palette.EGAColors"/>
            </summary>
            <param name="palEGA">EGA palette to get the standard 16 colors from</param>
            <returns>A new instance of a palette with the 16 colors at the indexes specified with <see cref="F:Eto.Drawing.Palette.EGAColors"/></returns>
        </member>
        <member name="M:Eto.Drawing.Palette.Save(System.IO.BinaryWriter,System.Int32,System.Boolean)">
            <summary>
            Saves this palette to the specified binary writer in (A)RGB components
            </summary>
            <remarks>
            Each component is saved as a single byte (regardless of the value of <paramref name="shift"/>).
            It is saved in the order of Alpha (if <paramref name="includeAlpha"/> is true), Red, Green, then Blue.
            </remarks>
            <param name="writer">Writer to write the data to</param>
            <param name="shift">Shift amount for each component. 0 = 0-255, 1 = 0-128, 2 = 0-64, etc</param>
            <param name="includeAlpha">True to include alpha, false to only include RGB components</param>
        </member>
        <member name="M:Eto.Drawing.Palette.Load(System.IO.BinaryReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads the palette from the specified binary reader in (A)RGB components
            </summary>
            <remarks>
            Each component is read as a single byte (regardless of the value of <paramref name="shift"/>).
            It is read in the order of Alpha (if <paramref name="includeAlpha"/> is true), Red, Green, then Blue.
            </remarks>
            <param name="reader">Reader to read the data from</param>
            <param name="size">Number of palette entried to load</param>
            <param name="shift">Shift amount for each component. 0 = 0-255, 1 = 0-128, 2 = 0-64, etc</param>
            <param name="includeAlpha">True to include the alpha component, false to only read RGB components</param>
        </member>
        <member name="M:Eto.Drawing.Palette.GetRGBColor(System.Int32)">
            <summary>
            Gets the cached ARGB value of the color at the specified <paramref name="index"/>
            </summary>
            <param name="index">Index to get the ARGB color for</param>
            <returns>A 32-bit ARGB color value of the color at the specified index</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.AddRange(System.Collections.Generic.IEnumerable{Eto.Drawing.Color})">
            <summary>
            Adds the specified <paramref name="colors"/> to this palette collection
            </summary>
            <param name="colors">Colors to add to this palette collection</param>
        </member>
        <member name="M:Eto.Drawing.Palette.InsertItem(System.Int32,Eto.Drawing.Color)">
            <summary>
            Called when inserting a color, to insert the cached argb value of the color
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.SetItem(System.Int32,Eto.Drawing.Color)">
            <summary>
            Called when setting a color in the palette, to set the cached argb value of the color
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.ClearItems">
            <summary>
            Called when clearing the items, to clear the cached argb values
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.RemoveItem(System.Int32)">
            <summary>
            Called when removing an item, to remove the cached argb value of the color
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.FindClosest(Eto.Drawing.Color)">
            <summary>
            Finds the closest color in this palette to the specified <paramref name="color"/>
            </summary>
            <param name="color">Color to use to find the closest color</param>
            <returns>Index of the closest entry of the specified <paramref name="color"/></returns>
        </member>
        <member name="M:Eto.Drawing.Palette.FindAddColour(Eto.Drawing.Color)">
            <summary>
            Finds the index of the specified color, or adds it if it does not exist
            </summary>
            <param name="color">Color to find/add</param>
            <returns>Index of the existing entry in this palette that matches the specified color, or the index of the newly added entry if not found</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.GetHashCode">
            <summary>
            Gets the hash code for this palette
            </summary>
            <returns>Hash code of this palette</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.Equals(System.Object)">
            <summary>
            Gets a value indicating that this object is equal to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">Object to compare for equality</param>
            <returns>True if the specified obj is a Palette and contains the same colors as this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.Clone">
            <summary>
            Creates a clone of this palette
            </summary>
            <returns>A new instance of a palette with the same color entries as this instance</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.System#ICloneable#Clone">
            <summary>
            Creates a clone of this palette
            </summary>
            <returns>A new instance of a palette with the same color entries as this instance</returns>
        </member>
        <member name="T:Eto.Drawing.Point">
            <summary>
            A struct representing X and Y co-ordinates as integer values
            </summary>
            <remarks>
            The point struct is used for drawing and positioning of elements and widgets
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Point.Add(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.Point.Empty">
            <summary>
            Gets an empty point with an X and Y value of zero
            </summary>
        </member>
        <member name="M:Eto.Drawing.Point.Distance(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Gets the distance between two points using pythagoras theorem
            </summary>
            <param name="point1">First point to calculate the distance from</param>
            <param name="point2">Second point to calculate the distance to</param>
            <returns>The distance between the two points</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Truncate(Eto.Drawing.PointF)">
            <summary>
            Truncates the X and Y components of the specified <paramref name="point"/> to a <see cref="T:Eto.Drawing.Point"/>
            </summary>
            <param name="point">Floating point value to truncate</param>
            <returns>A new instance of a Point with truncated X and Y values of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.Round(Eto.Drawing.PointF)">
            <summary>
            Rounds the X and Y components of the specified <paramref name="point"/> to a <see cref="T:Eto.Drawing.Point"/>
            </summary>
            <param name="point">Floating point value to round</param>
            <returns>A new instance of a Point with rounded X and Y values of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.Min(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Returns the minimum X and Y components of two points
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <returns>A new point with the minimum X and Y values of the two points</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Max(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Returns the maximum X and Y components of two points
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <returns>A new point with the maximum X and Y values of the two points</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Abs(Eto.Drawing.Point)">
            <summary>
            Returns the absolute X and Y components of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point with positive or negative X and/or Y values</param>
            <returns>A new point with absolute (positive) X and Y values of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a Point class with specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Initial X value for the point</param>
            <param name="y">Initial Y value for the point</param>
        </member>
        <member name="M:Eto.Drawing.Point.#ctor(Eto.Drawing.Size)">
            <summary>
            Initializes a new instance of a Point class with <see cref="P:Eto.Drawing.Point.X"/> and <see cref="P:Eto.Drawing.Point.Y"/> values corresponding to the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> values 
            of the specified <paramref name="size"/>, respecitively
            </summary>
            <param name="size">Size to initialize the X and Y values of the new instance with</param>
        </member>
        <member name="M:Eto.Drawing.Point.#ctor(Eto.Drawing.PointF)">
            <summary>
            Initializes a new instance of a Point class with truncated values of the specified floating-point <paramref name="point"/>
            </summary>
            <param name="point">PointF to initialize the X and Y values of the new instance with</param>
        </member>
        <member name="M:Eto.Drawing.Point.Restrict(Eto.Drawing.Rectangle)">
            <summary>
            Restricts the X and Y co-ordinates within the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            This will update the X and Y co-ordinates to be within the specified <paramref name="rectangle"/>'s bounds.
            The updated co-ordinates will be the closest to the original value as possible.
            E.g. if the X co-ordinate is greater than the <see cref="P:Eto.Drawing.Rectangle.Right"/> of the rectangle, it will be set
            to be <see cref="P:Eto.Drawing.Rectangle.Right"/> minus one, to be within the rectangle's bounds.
            </remarks>
            <param name="rectangle">Rectangle to restrict the X and Y co-ordinates in</param>
        </member>
        <member name="M:Eto.Drawing.Point.Add(System.Int32,System.Int32)">
            <summary>
            Adds the specified <paramref name="x"/> and <paramref name="y"/> values to this point
            </summary>
            <param name="x">Value to add to the X co-ordinate of this point</param>
            <param name="y">Value to add to the Y co-ordinate of this point</param>
        </member>
        <member name="M:Eto.Drawing.Point.Add(Eto.Drawing.Point)">
            <summary>
            Adds the X and Y co-ordinate values of the specified <paramref name="point"/> to this point
            </summary>
            <param name="point">Point with X and Y values to add to this point</param>
        </member>
        <member name="M:Eto.Drawing.Point.op_Subtraction(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Operator to return the difference between two points as a <see cref="T:Eto.Drawing.Size"/>
            </summary>
            <param name="point1">Base point value</param>
            <param name="point2">Point to subtract</param>
            <returns>A new instance of a Size with the Width and Height equal to the difference of the X and Y co-ordinates, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Addition(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Operator to return the addition of two points as a <see cref="T:Eto.Drawing.Size"/>
            </summary>
            <param name="point1">Base point value</param>
            <param name="point2">Point to add</param>
            <returns>A new instance of a Size with the Width and Height equal to the sum of the two point's X and Y co-ordinates, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Addition(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Operator to add a size to a point
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to add to the point's X and Y co-ordinates</param>
            <returns>A new point with the sum of the specified <paramref name="point"/>'s X and Y components and the <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Subtraction(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Operator to subtract a size from a point
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to subtract to the point's X and Y co-ordinates</param>
            <returns>A new point with the sum of the specified <paramref name="point"/>'s X and Y components and the <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Addition(Eto.Drawing.Point,System.Int32)">
            <summary>
            Operator to add a <paramref name="value"/> to both the X and Y co-ordinates of a point
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to add to both the X and Y co-ordinates of the point</param>
            <returns>A new instance of a point with the sum of the <paramref name="point"/>'s X and Y co-ordinates and the specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Subtraction(Eto.Drawing.Point,System.Int32)">
            <summary>
            Operator to subtract a <paramref name="value"/> from both the X and Y co-ordinates of a point
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to subtract to both the X and Y co-ordinates of the point</param>
            <returns>A new instance of a point with the value of the <paramref name="point"/>'s X and Y co-ordinates minus the specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Equality(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Determines equality between two points
            </summary>
            <remarks>
            Equality is when both the X and Y values of both points are equal
            </remarks>
            <param name="point1">First point to compare</param>
            <param name="point2">Second point to compare</param>
            <returns>True if both points are equal, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Inequality(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Determines the inequality between two points
            </summary>
            <remarks>
            Inequality is when either the X and Y values of both points are different
            </remarks>
            <param name="point1">First point to compare</param>
            <param name="point2">Second point to compare</param>
            <returns>True if the two points are not equal, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Multiply(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Multiplies the specified <paramref name="point"/> with a <paramref name="size"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to multiply the X and Y co-ordinates with the Width and Height of the <paramref name="size"/>, respectively</param>
            <returns>A new instance of a point with the product of the specified <paramref name="point"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Division(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Divides the specified <paramref name="point"/> with a <paramref name="size"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to divide the X and Y co-ordinates with the Width and Height of the <paramref name="size"/>, respectively</param>
            <returns>A new instance of a point with the division of the specified <paramref name="point"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Multiply(Eto.Drawing.Point,System.Int32)">
            <summary>
            Multiplies the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="value"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to multiply the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the product of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Division(Eto.Drawing.Point,System.Int32)">
            <summary>
            Divides the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="value"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to divide the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the division of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.Equals(System.Object)">
            <summary>
            Returns a value indicating that the specified <paramref name="obj"/> is equal to this point
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the specified <paramref name="obj"/> is a Point and is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Point.GetHashCode">
            <summary>
            Gets the hash code of this point
            </summary>
            <returns>Hash code for this point</returns>
        </member>
        <member name="M:Eto.Drawing.Point.ToString">
            <summary>
            Converts this point to a string
            </summary>
            <returns>String representation of this point</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Equals(Eto.Drawing.Point)">
            <summary>
            Returns a value indicating that the specified <paramref name="other"/> point is equal to this point
            </summary>
            <param name="other">Other point to compare</param>
            <returns>True if the other point is equal to this point, otherwise false</returns>
        </member>
        <member name="P:Eto.Drawing.Point.IsEmpty">
            <summary>
            Gets a value indicating that both the X and Y co-ordinates of this point are zero
            </summary>
        </member>
        <member name="P:Eto.Drawing.Point.X">
            <summary>
            Gets or sets the X co-ordinate of this point
            </summary>
        </member>
        <member name="P:Eto.Drawing.Point.Y">
            <summary>
            Gets or sets the Y co-ordinate of this point
            </summary>
        </member>
        <member name="P:Eto.Drawing.Point.IsZero">
            <summary>
            Gets a value indicating that both the X and Y co-ordinates of this point are zero
            </summary>
        </member>
        <member name="T:Eto.Drawing.PointF">
            <summary>
            A struct representing X and Y co-ordinates as floating point values
            </summary>
            <remarks>
            The point struct is used for drawing and positioning of elements and widgets
            </remarks>
        </member>
        <member name="M:Eto.Drawing.PointF.Add(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:Eto.Drawing.PointF.Empty">
            <summary>
            Gets an empty point with an X and Y value of zero
            </summary>
        </member>
        <member name="M:Eto.Drawing.PointF.Distance(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Gets the distance between two points using pythagoras theorem
            </summary>
            <param name="point1">First point to calculate the distance from</param>
            <param name="point2">Second point to calculate the distance to</param>
            <returns>The distance between the two points</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Min(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Returns the minimum X and Y components of two points
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <returns>A new point with the minimum X and Y values of the two points</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Max(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Returns the maximum X and Y components of two points
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <returns>A new point with the maximum X and Y values of the two points</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Abs(Eto.Drawing.PointF)">
            <summary>
            Returns the absolute X and Y components of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point with positive or negative X and/or Y values</param>
            <returns>A new point with absolute (positive) X and Y values of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of a Point class with specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Initial X value for the point</param>
            <param name="y">Initial Y value for the point</param>
        </member>
        <member name="M:Eto.Drawing.PointF.#ctor(Eto.Drawing.SizeF)">
            <summary>
            Initializes a new instance of a Point class with <see cref="P:Eto.Drawing.PointF.X"/> and <see cref="P:Eto.Drawing.PointF.Y"/> values corresponding to the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> values 
            of the specified <paramref name="size"/>, respecitively
            </summary>
            <param name="size">Size to initialize the X and Y values of the new instance with</param>
        </member>
        <member name="M:Eto.Drawing.PointF.Restrict(Eto.Drawing.RectangleF)">
            <summary>
            Restricts the X and Y co-ordinates within the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            This will update the X and Y co-ordinates to be within the specified <paramref name="rectangle"/>'s bounds.
            The updated co-ordinates will be the closest to the original value as possible.
            E.g. if the X co-ordinate is greater than the <see cref="P:Eto.Drawing.Rectangle.Right"/> of the rectangle, it will be set
            to be <see cref="P:Eto.Drawing.Rectangle.Right"/> minus one, to be within the rectangle's bounds.
            </remarks>
            <param name="rectangle">Rectangle to restrict the X and Y co-ordinates in</param>
        </member>
        <member name="M:Eto.Drawing.PointF.Add(System.Single,System.Single)">
            <summary>
            Adds the specified <paramref name="x"/> and <paramref name="y"/> values to this point
            </summary>
            <param name="x">Value to add to the X co-ordinate of this point</param>
            <param name="y">Value to add to the Y co-ordinate of this point</param>
        </member>
        <member name="M:Eto.Drawing.PointF.Add(Eto.Drawing.PointF)">
            <summary>
            Adds the X and Y co-ordinate values of the specified <paramref name="point"/> to this point
            </summary>
            <param name="point">Point with X and Y values to add to this point</param>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Subtraction(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Operator to return the difference between two points as a <see cref="T:Eto.Drawing.Size"/>
            </summary>
            <param name="point1">Base point value</param>
            <param name="point2">Point to subtract</param>
            <returns>A new instance of a Size with the Width and Height equal to the difference of the X and Y co-ordinates, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Addition(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Operator to return the addition of two points as a <see cref="T:Eto.Drawing.Size"/>
            </summary>
            <param name="point1">Base point value</param>
            <param name="point2">Point to add</param>
            <returns>A new instance of a Size with the Width and Height equal to the sum of the two point's X and Y co-ordinates, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Addition(Eto.Drawing.PointF,Eto.Drawing.Size)">
            <summary>
            Operator to add a size to a point
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to add to the point's X and Y co-ordinates</param>
            <returns>A new point with the sum of the specified <paramref name="point"/>'s X and Y components and the <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Subtraction(Eto.Drawing.PointF,Eto.Drawing.Size)">
            <summary>
            Operator to subtract a size from a point
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to subtract to the point's X and Y co-ordinates</param>
            <returns>A new point with the sum of the specified <paramref name="point"/>'s X and Y components and the <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Addition(Eto.Drawing.PointF,System.Single)">
            <summary>
            Operator to add a <paramref name="value"/> to both the X and Y co-ordinates of a point
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to add to both the X and Y co-ordinates of the point</param>
            <returns>A new instance of a point with the sum of the <paramref name="point"/>'s X and Y co-ordinates and the specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Subtraction(Eto.Drawing.PointF,System.Single)">
            <summary>
            Operator to subtract a <paramref name="value"/> from both the X and Y co-ordinates of a point
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to subtract to both the X and Y co-ordinates of the point</param>
            <returns>A new instance of a point with the value of the <paramref name="point"/>'s X and Y co-ordinates minus the specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Equality(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Determines equality between two points
            </summary>
            <remarks>
            Equality is when both the X and Y values of both points are equal
            </remarks>
            <param name="point1">First point to compare</param>
            <param name="point2">Second point to compare</param>
            <returns>True if both points are equal, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Inequality(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Determines the inequality between two points
            </summary>
            <remarks>
            Inequality is when either the X and Y values of both points are different
            </remarks>
            <param name="point1">First point to compare</param>
            <param name="point2">Second point to compare</param>
            <returns>True if the two points are not equal, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Multiply(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Multiplies the specified <paramref name="point"/> with a <paramref name="size"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to multiply the X and Y co-ordinates with the Width and Height of the <paramref name="size"/>, respectively</param>
            <returns>A new instance of a point with the product of the specified <paramref name="point"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Division(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Divides the specified <paramref name="point"/> with a <paramref name="size"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to divide the X and Y co-ordinates with the Width and Height of the <paramref name="size"/>, respectively</param>
            <returns>A new instance of a point with the division of the specified <paramref name="point"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Multiply(Eto.Drawing.PointF,System.Single)">
            <summary>
            Multiplies the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="value"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to multiply the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the product of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Division(Eto.Drawing.PointF,System.Single)">
            <summary>
            Divides the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="value"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to divide the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the division of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Implicit(Eto.Drawing.Point)~Eto.Drawing.PointF">
            <summary>
            Implicit conversion from a <see cref="T:Eto.Drawing.Point"/> to a <see cref="T:Eto.Drawing.PointF"/>
            </summary>
            <remarks>
            Since no precision is lost, this can be implicit.
            </remarks>
            <param name="point">Point to convert</param>
            <returns>A new instance of a PointF with the value of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Equals(System.Object)">
            <summary>
            Returns a value indicating that the specified <paramref name="obj"/> is equal to this point
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the specified <paramref name="obj"/> is a Point and is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.GetHashCode">
            <summary>
            Gets the hash code of this point
            </summary>
            <returns>Hash code for this point</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.ToString">
            <summary>
            Converts this point to a string
            </summary>
            <returns>String representation of this point</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Equals(Eto.Drawing.PointF)">
            <summary>
            Returns a value indicating that the specified <paramref name="other"/> point is equal to this point
            </summary>
            <param name="other">Other point to compare</param>
            <returns>True if the other point is equal to this point, otherwise false</returns>
        </member>
        <member name="P:Eto.Drawing.PointF.IsEmpty">
            <summary>
            Gets a value indicating that both the X and Y co-ordinates of this point are zero
            </summary>
        </member>
        <member name="P:Eto.Drawing.PointF.X">
            <summary>
            Gets or sets the X co-ordinate of this point
            </summary>
        </member>
        <member name="P:Eto.Drawing.PointF.Y">
            <summary>
            Gets or sets the Y co-ordinate of this point
            </summary>
        </member>
        <member name="P:Eto.Drawing.PointF.IsZero">
            <summary>
            Gets a value indicating that both the X and Y co-ordinates of this point are zero
            </summary>
        </member>
        <member name="T:Eto.Drawing.Rectangle">
            <summary>
            Represents a rectangle with a location (X, Y) and size (Width, Height) components.
            </summary>
            <remarks>
            A rectangle is defined by a location (X, Y) and a size (Width, Height).
            The width and/or height can be negative.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Round(Eto.Drawing.RectangleF)">
            <summary>
            Converts a floating point <paramref name="rectangle"/> to an integral <see cref="T:Eto.Drawing.Rectangle"/> by rounding the X, Y, Width, and Height.
            </summary>
            <param name="rectangle">Rectangle to round</param>
            <returns>A new instance of a Rectangle with rounded X, Y, Width, and Height values</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Ceiling(Eto.Drawing.RectangleF)">
            <summary>
            Converts a floating point <paramref name="rectangle"/> to an integral <see cref="T:Eto.Drawing.Rectangle"/> by getting the smallest integral value of X, Y, Width, and Height
            </summary>
            <remarks>
            This is used to get an integral rectangle that bounds the floating point rectangle completely.
            E.g. if a RectangleF has (X,Y,W,H) values of 0.2, 0.9, 1.1, 1.9, it would return a new integral rectangle
            with values 0, 0, 2, 2.
            </remarks>
            <param name="rectangle">Rectangle to get the ceiling</param>
            <returns>A new instance of a Rectangle with truncated X, Y and a ceiling Width and Height values</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Truncate(Eto.Drawing.RectangleF)">
            <summary>
            Converts a floating point <paramref name="rectangle"/> to an integral <see cref="T:Eto.Drawing.Rectangle"/> by truncating the X, Y, Width, and Height values
            </summary>
            <param name="rectangle">Rectangle to truncate</param>
            <returns>A new instance of a Rectangle with truncated X, Y, Width, and Height values</returns>
        </member>
        <member name="F:Eto.Drawing.Rectangle.Empty">
            <summary>
            Gets an empty rectangle with zero X, Y, Width, and Height components
            </summary>
            <remarks>
            Useful when you want a rectangle no size or location.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="location"/> and <paramref name="size"/>
            </summary>
            <remarks>
            This is a shortcut for <seealso cref="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Rectangle)"/>
            </remarks>
            <param name="location">Minimum location for the rectangle</param>
            <param name="size">Maximum size for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Size)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="size"/> at an X,Y location of 0, 0
            </summary>
            <remarks>
            This is a shortcut for <seealso cref="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Rectangle)"/>
            </remarks>
            <param name="size">Maxiumum size for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Rectangle)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            This ensures that the current rectangle's bounds fall within the bounds of the specified <paramref name="rectangle"/>.
            It is useful to ensure that the rectangle does not exceed certain limits (e.g. for drawing)
            </remarks>
            <param name="rectangle"></param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Normalize">
            <summary>
            Normalizes the rectangle so both the <see cref="P:Eto.Drawing.Rectangle.Width"/> and <see cref="P:Eto.Drawing.Rectangle.Height"/> are positive, without changing the location of the rectangle
            </summary>
            <remarks>
            Rectangles can have negative widths/heights, which means that the starting location will not always be at the top left
            corner.  Normalizing the rectangle will ensure that the <see cref="P:Eto.Drawing.Rectangle.X"/> and <see cref="P:Eto.Drawing.Rectangle.Y"/> co-ordinates of the rectangle
            are at the top left.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Rectangle.#ctor(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Initializes a new instance of the Rectangle class with two points
            </summary>
            <remarks>
            This will always create a normalized rect, in that the location will be the minimum of the X and Y co-ordinates of the supplied
            points.
            </remarks>
            <param name="start">Starting point of the rectangle</param>
            <param name="end">Ending point of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.#ctor(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified <paramref name="location"/> and <paramref name="size"/>
            </summary>
            <param name="location">Location of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.#ctor(Eto.Drawing.Size)">
            <summary>
            Initializes a new instance of the Rectangle class with X, Y co-ordinates at 0,0 and the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to give the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>
            </summary>
            <param name="x">X co-ordinate for the location of the rectangle</param>
            <param name="y">Y co-ordinate for the location of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets the location of the rectangle by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Horizontal offset to move the rectangle</param>
            <param name="y">Vertical offset to move the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Offset(Eto.Drawing.Size)">
            <summary>
            Offsets the location of the rectangle by the specified <paramref name="size"/>
            </summary>
            <param name="size">Width and Height to move the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Contains(Eto.Drawing.Point)">
            <summary>
            Gets a value indicating that the specified <paramref name="point"/> is within the bounds of this rectangle
            </summary>
            <param name="point">Point to test</param>
            <returns>True if the point is within the bounds of this rectangle, false if it is outside the bounds</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Gets a value indicating that the specified <paramref name="x"/> and <paramref name="y"/> co-ordinates are within the bounds of this rectangle
            </summary>
            <param name="x">X co-ordinate to test</param>
            <param name="y">Y co-ordinate to test</param>
            <returns>True if the rectangle contains the x and y co-ordinates, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Intersects(Eto.Drawing.Rectangle)">
            <summary>
            Gets a value indicating that the specified <paramref name="rectangle"/> overlaps this rectangle
            </summary>
            <param name="rectangle">Rectangle to test for intersection/overlap</param>
            <returns>True if the rectangle overlaps this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Inflate(Eto.Drawing.Size)">
            <summary>
            Inflates all dimensions of this rectangle by the specified <paramref name="size"/>
            </summary>
            <remarks>
            This inflates the rectangle in all dimensions by the width and height specified by <paramref name="size"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="size">Size to inflate the rectangle by</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates all dimensions of this rectangle by the specified <paramref name="width"/> and <paramref name="height"/>
            </summary>
            <remarks>
            This inflates the rectangle in all dimensions by the specified <paramref name="width"/> and <paramref name="height"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="width">Width to inflate the left and right of the rectangle by</param>
            <param name="height">Height to inflate the top and bottom of the rectangle by</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Align(Eto.Drawing.Size)">
            <summary>
            Aligns the rectangle to a grid of the specified <paramref name="gridSize"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="gridSize">Size of the grid to align the rectangle to</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Align(System.Int32,System.Int32)">
            <summary>
            Aligns the rectangle to a grid of the specified <paramref name="gridWidth"/> and <paramref name="gridHeight"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="gridWidth">Grid width</param>
            <param name="gridHeight">Grid height</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Union(Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Combines two rectangles into one rectangle that encompasses both
            </summary>
            <param name="rect1">First rectangle to union</param>
            <param name="rect2">Second rectangle to union</param>
            <returns>A rectangle that encompasses both <paramref name="rect1"/> and <paramref name="rect2"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Multiply(Eto.Drawing.Rectangle,System.Int32)">
            <summary>
            Multiplies all X, Y, Width, Height components of the <paramref name="rectangle"/> by a <paramref name="factor"/>
            </summary>
            <param name="rectangle">Rectangle to multiply</param>
            <param name="factor">Factor to mulitply by</param>
            <returns>A new instance of a Rectangle with the product of the specified <paramref name="rectangle"/> and the <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Division(Eto.Drawing.Rectangle,System.Int32)">
            <summary>
            Divides all X, Y, Width, Height components of the <paramref name="rectangle"/> by a <paramref name="factor"/> factor
            </summary>
            <param name="rectangle">Rectangle to divide</param>
            <param name="factor">Factor to divide by</param>
            <returns>A new instance of a Rectangle with the value of <paramref name="rectangle"/> divided by a <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Multiply(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Multiplies the specified <paramref name="rectangle"/> by the Width and Height of <paramref name="size"/>
            </summary>
            <remarks>
            The X and Width components will be multiplied by the Width of the specified <paramref name="size"/>, and
            the Y and Height components will be multiplied by the Height.
            </remarks>
            <param name="rectangle">Rectangle to multiply</param>
            <param name="size">Width and Height to multiply the rectangle by</param>
            <returns>A new instance of a Rectangle with the product of the <paramref name="rectangle"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Division(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Divides the specified <paramref name="rectangle"/> by the Width and Height of <paramref name="size"/>
            </summary>
            <remarks>
            The X and Width components will be divided by the Width of the specified <paramref name="size"/>, and
            the Y and Height components will be divided by the Height.
            </remarks>
            <param name="rectangle">Rectangle to divide</param>
            <param name="size">Width and Height to divide the rectangle by</param>
            <returns>A new instance of a Rectangle with the value of <paramref name="rectangle"/> divided by <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Equality(Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Compares two rectangles for equality
            </summary>
            <param name="rect1">First rectangle to compare</param>
            <param name="rect2">Second rectangle to compare</param>
            <returns>True if the two rectangles are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Inequality(Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Compares two rectangles for inequality
            </summary>
            <param name="rect1">First rectangle to compare</param>
            <param name="rect2">Second rectangle to compare</param>
            <returns>True if the two rectangles are not equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.ToString">
            <summary>
            Converts this rectangle to a string
            </summary>
            <returns>String representation of this rectangle</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Equals(System.Object)">
            <summary>
            Compares this rectangle to an object for equality
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the <paramref name="obj"/> is a Rectangle and is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.GetHashCode">
            <summary>
            Gets the hash code for this rectangle
            </summary>
            <returns>Hash code value for this rectangle</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Equals(Eto.Drawing.Rectangle)">
            <summary>
            Compares this rectangle with the specified <paramref name="other"/> rectangle
            </summary>
            <param name="other">Other rectangle to compare with</param>
            <returns>True if the <paramref name="other"/> rectangle is equal to this instance, false otherwise</returns>
        </member>
        <member name="P:Eto.Drawing.Rectangle.IsZero">
            <summary>
            Gets a value indicating that both the <see name="Location"/> and <see cref="P:Eto.Drawing.Rectangle.Size"/> of this rectangle are zero
            </summary>
            <remarks>
            The X, Y, Width, and Height components of this rectangle must be zero for this to return true.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.IsEmpty">
            <summary>
            Gets a value indicating that the <see cref="P:Eto.Drawing.Rectangle.Size"/> of this rectangle is empty (either the width or height are zero)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Location">
            <summary>
            Gets the location of this rectangle
            </summary>
            <remarks>
            Same as getting the <see cref="P:Eto.Drawing.Rectangle.X"/> and <see cref="P:Eto.Drawing.Rectangle.Y"/> co-ordinates of this rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.EndLocation">
            <summary>
            Gets the ending location of this rectangle
            </summary>
            <remarks>
            This gets/sets the product of the <see cref="P:Eto.Drawing.Rectangle.Location"/> + <see cref="P:Eto.Drawing.Rectangle.Size"/>. If the Width or Height of this rectangle
            is positive, then the X/Y of the returned location will be minus 1 so as to be inside of the rectangle's bounds.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Size">
            <summary>
            Gets or sets the size of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.X">
            <summary>
            Gets or sets the X co-ordinate of the <see cref="P:Eto.Drawing.Rectangle.Location"/> of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Y">
            <summary>
            Gets or sets the Y co-ordinate of the <see cref="P:Eto.Drawing.Rectangle.Location"/> of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Width">
            <summary>
            Gets or sets the Width of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Height">
            <summary>
            Gets or sets the Height of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Top">
            <summary>
            Gets or sets the logical top of this rectangle (Y co-ordinate if Height is positive, Y + Height if negative) 
            </summary>
            <remarks>
            This is always the logical top, where if the <see cref="P:Eto.Drawing.Rectangle.Height"/> is positive it will adjust the Y co-ordinate.
            If the Height of the rectangle is negative, then this will adjust the Height when setting the value.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Left">
            <summary>
            Gets or sets the logical left of this rectangle (X co-ordinate if Width is positive, X + Width if negative)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Right">
            <summary>
            Gets or sets the logical right of this rectangle (X + Width if Width is positive, X + 1 if negative)
            </summary>
            <remarks>
            This differs from the <seealso cref="P:Eto.Drawing.Rectangle.InnerRight"/> in that this will return the co-ordinate adjacent to the right edge
            of the rectangle, whereas <seealso cref="P:Eto.Drawing.Rectangle.InnerRight"/> returns the co-ordinate that is inside the rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Bottom">
            <summary>
            Gets or sets the logical bottom of this rectangle (Y + Height if Height is positive, Y + 1 if negative)
            </summary>
            <remarks>
            This differs from the <seealso cref="P:Eto.Drawing.Rectangle.InnerBottom"/> in that this will return the co-ordinate adjacent to the bottom edge
            of the rectangle, whereas <seealso cref="P:Eto.Drawing.Rectangle.InnerBottom"/> returns the co-ordinate that is inside the rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.TopLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Top"/> and <see cref="P:Eto.Drawing.Rectangle.Left"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.TopRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Top"/> and <see cref="P:Eto.Drawing.Rectangle.Right"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.BottomRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Bottom"/> and <see cref="P:Eto.Drawing.Rectangle.Right"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.BottomLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Bottom"/> and <see cref="P:Eto.Drawing.Rectangle.Left"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerTopRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Top"/> and <see cref="P:Eto.Drawing.Rectangle.InnerRight"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.TopRight"/> but inside the rectangle's bounds instead of just to the right
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerBottomRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.InnerBottom"/> and <see cref="P:Eto.Drawing.Rectangle.InnerRight"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.BottomRight"/> but inside the rectangle's bounds instead of just to the right and bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerBottomLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.InnerBottom"/> and <see cref="P:Eto.Drawing.Rectangle.Left"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.BottomLeft"/> but inside the rectangle's bounds instead of just below the bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerBottom">
            <summary>
            Gets or sets the bottom of the rectangle that is inside the bounds
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.Bottom"/> but inside the rectangle's bounds instead of just below the bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerRight">
            <summary>
            Gets or sets the right of the rectangle that is inside the bounds
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.Right"/> but inside the rectangle's bounds instead of just to the right
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Center">
            <summary>
            Gets or sets the rectangle's center position
            </summary>
            <remarks>
            This gets/sets the <see cref="P:Eto.Drawing.Rectangle.MiddleX"/> and <see cref="P:Eto.Drawing.Rectangle.MiddleY"/> as a point
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.MiddleX">
            <summary>
            Gets or sets the rectangle's middle horizontal position
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.MiddleY">
            <summary>
            Gets or sets the rectangle's middle vertical position
            </summary>
        </member>
        <member name="T:Eto.Drawing.RectangleF">
            <summary>
            Represents a floating point rectangle with a location (X, Y) and size (Width, Height) components.
            </summary>
            <remarks>
            A rectangle is defined by a location (X, Y) and a size (Width, Height).
            The width and/or height can be negative.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Implicit(Eto.Drawing.Rectangle)~Eto.Drawing.RectangleF">
            <summary>
            Implicitly converts the specified integral <paramref name="rect"/> to a floating point <see cref="T:Eto.Drawing.RectangleF"/>
            </summary>
            <remarks>
            Can implicitly convert to floating point as no data is lost. To convert a floating point <see cref="T:Eto.Drawing.RectangleF"/>
            to an integral <see cref="T:Eto.Drawing.Rectangle"/>, you can use <see cref="M:Eto.Drawing.Rectangle.Round(Eto.Drawing.RectangleF)"/>, <see cref="M:Eto.Drawing.Rectangle.Ceiling(Eto.Drawing.RectangleF)"/>, or
            <see cref="M:Eto.Drawing.Rectangle.Truncate(Eto.Drawing.RectangleF)"/>.
            </remarks>
            <param name="rect">Rectangle to convert to floating point</param>
            <returns>A new instance of a RectangleF with the same value of the specified <paramref name="rect"/></returns>
        </member>
        <member name="F:Eto.Drawing.RectangleF.Empty">
            <summary>
            Gets an empty rectangle with zero X, Y, Width, and Height components
            </summary>
            <remarks>
            Useful when you want a rectangle no size or location.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Restrict(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="location"/> and <paramref name="size"/>
            </summary>
            <remarks>
            This is a shortcut for <seealso cref="!:Restrict(Rectangle)"/>
            </remarks>
            <param name="location">Minimum location for the rectangle</param>
            <param name="size">Maximum size for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Restrict(Eto.Drawing.SizeF)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="size"/> at an X,Y location of 0, 0
            </summary>
            <remarks>
            This is a shortcut for <seealso cref="!:Restrict(Rectangle)"/>
            </remarks>
            <param name="size">Maxiumum size for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Restrict(Eto.Drawing.RectangleF)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            This ensures that the current rectangle's bounds fall within the bounds of the specified <paramref name="rectangle"/>.
            It is useful to ensure that the rectangle does not exceed certain limits (e.g. for drawing)
            </remarks>
            <param name="rectangle"></param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Normalize">
            <summary>
            Normalizes the rectangle so both the <see cref="P:Eto.Drawing.RectangleF.Width"/> and <see cref="P:Eto.Drawing.RectangleF.Height"/> are positive, without changing the location of the rectangle
            </summary>
            <remarks>
            Rectangles can have negative widths/heights, which means that the starting location will not always be at the top left
            corner.  Normalizing the rectangle will ensure that the <see cref="P:Eto.Drawing.RectangleF.X"/> and <see cref="P:Eto.Drawing.RectangleF.Y"/> co-ordinates of the rectangle
            are at the top left.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.RectangleF.#ctor(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Initializes a new instance of the Rectangle class with two points
            </summary>
            <remarks>
            This will always create a normalized rect, in that the location will be the minimum of the X and Y co-ordinates of the supplied
            points.
            </remarks>
            <param name="start">Starting point of the rectangle</param>
            <param name="end">Ending point of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.#ctor(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified <paramref name="location"/> and <paramref name="size"/>
            </summary>
            <param name="location">Location of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.#ctor(Eto.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the Rectangle class with X, Y co-ordinates at 0,0 and the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to give the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>
            </summary>
            <param name="x">X co-ordinate for the location of the rectangle</param>
            <param name="y">Y co-ordinate for the location of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Offset(System.Single,System.Single)">
            <summary>
            Offsets the location of the rectangle by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Horizontal offset to move the rectangle</param>
            <param name="y">Vertical offset to move the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Offset(Eto.Drawing.SizeF)">
            <summary>
            Offsets the location of the rectangle by the specified <paramref name="size"/>
            </summary>
            <param name="size">Width and Height to move the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Contains(Eto.Drawing.PointF)">
            <summary>
            Gets a value indicating that the specified <paramref name="point"/> is within the bounds of this rectangle
            </summary>
            <param name="point">Point to test</param>
            <returns>True if the point is within the bounds of this rectangle, false if it is outside the bounds</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Gets a value indicating that the specified <paramref name="x"/> and <paramref name="y"/> co-ordinates are within the bounds of this rectangle
            </summary>
            <param name="x">X co-ordinate to test</param>
            <param name="y">Y co-ordinate to test</param>
            <returns>True if the rectangle contains the x and y co-ordinates, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Intersects(Eto.Drawing.RectangleF)">
            <summary>
            Gets a value indicating that the specified <paramref name="rectangle"/> overlaps this rectangle
            </summary>
            <param name="rectangle">Rectangle to test for intersection/overlap</param>
            <returns>True if the rectangle overlaps this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Inflate(Eto.Drawing.SizeF)">
            <summary>
            Inflates all dimensions of this rectangle by the specified <paramref name="size"/>
            </summary>
            <remarks>
            This inflates the rectangle in all dimensions by the width and height specified by <paramref name="size"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="size">Size to inflate the rectangle by</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Inflate(System.Single,System.Single)">
            <summary>
            Inflates all dimensions of this rectangle by the specified <paramref name="width"/> and <paramref name="height"/>
            </summary>
            <remarks>
            This inflates the rectangle in all dimensions by the specified <paramref name="width"/> and <paramref name="height"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="width">Width to inflate the left and right of the rectangle by</param>
            <param name="height">Height to inflate the top and bottom of the rectangle by</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Align(Eto.Drawing.SizeF)">
            <summary>
            Aligns the rectangle to a grid of the specified <paramref name="gridSize"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="gridSize">Size of the grid to align the rectangle to</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Align(System.Single,System.Single)">
            <summary>
            Aligns the rectangle to a grid of the specified <paramref name="gridWidth"/> and <paramref name="gridHeight"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="gridWidth">Grid width</param>
            <param name="gridHeight">Grid height</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Union(Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Combines two rectangles into one rectangle that encompasses both
            </summary>
            <param name="rect1">First rectangle to union</param>
            <param name="rect2">Second rectangle to union</param>
            <returns>A rectangle that encompasses both <paramref name="rect1"/> and <paramref name="rect2"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Multiply(Eto.Drawing.RectangleF,System.Single)">
            <summary>
            Multiplies all X, Y, Width, Height components of the <paramref name="rectangle"/> by a <paramref name="factor"/>
            </summary>
            <param name="rectangle">Rectangle to multiply</param>
            <param name="factor">Factor to mulitply by</param>
            <returns>A new instance of a Rectangle with the product of the specified <paramref name="rectangle"/> and the <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Division(Eto.Drawing.RectangleF,System.Single)">
            <summary>
            Divides all X, Y, Width, Height components of the <paramref name="rectangle"/> by a <paramref name="factor"/> factor
            </summary>
            <param name="rectangle">Rectangle to divide</param>
            <param name="factor">Factor to divide by</param>
            <returns>A new instance of a Rectangle with the value of <paramref name="rectangle"/> divided by a <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Multiply(Eto.Drawing.RectangleF,Eto.Drawing.SizeF)">
            <summary>
            Multiplies the specified <paramref name="rectangle"/> by the Width and Height of <paramref name="size"/>
            </summary>
            <remarks>
            The X and Width components will be multiplied by the Width of the specified <paramref name="size"/>, and
            the Y and Height components will be multiplied by the Height.
            </remarks>
            <param name="rectangle">Rectangle to multiply</param>
            <param name="size">Width and Height to multiply the rectangle by</param>
            <returns>A new instance of a Rectangle with the product of the <paramref name="rectangle"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Division(Eto.Drawing.RectangleF,Eto.Drawing.SizeF)">
            <summary>
            Divides the specified <paramref name="rectangle"/> by the Width and Height of <paramref name="size"/>
            </summary>
            <remarks>
            The X and Width components will be divided by the Width of the specified <paramref name="size"/>, and
            the Y and Height components will be divided by the Height.
            </remarks>
            <param name="rectangle">Rectangle to divide</param>
            <param name="size">Width and Height to divide the rectangle by</param>
            <returns>A new instance of a Rectangle with the value of <paramref name="rectangle"/> divided by <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Equality(Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Compares two rectangles for equality
            </summary>
            <param name="rect1">First rectangle to compare</param>
            <param name="rect2">Second rectangle to compare</param>
            <returns>True if the two rectangles are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Inequality(Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Compares two rectangles for inequality
            </summary>
            <param name="rect1">First rectangle to compare</param>
            <param name="rect2">Second rectangle to compare</param>
            <returns>True if the two rectangles are not equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.ToString">
            <summary>
            Converts this rectangle to a string
            </summary>
            <returns>String representation of this rectangle</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Equals(System.Object)">
            <summary>
            Compares this rectangle to an object for equality
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the <paramref name="obj"/> is a Rectangle and is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.GetHashCode">
            <summary>
            Gets the hash code for this rectangle
            </summary>
            <returns>Hash code value for this rectangle</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Equals(Eto.Drawing.RectangleF)">
            <summary>
            Compares this rectangle with the specified <paramref name="other"/> rectangle
            </summary>
            <param name="other">Other rectangle to compare with</param>
            <returns>True if the <paramref name="other"/> rectangle is equal to this instance, false otherwise</returns>
        </member>
        <member name="P:Eto.Drawing.RectangleF.IsZero">
            <summary>
            Gets a value indicating that both the <see name="Location"/> and <see cref="P:Eto.Drawing.RectangleF.Size"/> of this rectangle are zero
            </summary>
            <remarks>
            The X, Y, Width, and Height components of this rectangle must be zero for this to return true.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.IsEmpty">
            <summary>
            Gets a value indicating that the <see cref="P:Eto.Drawing.RectangleF.Size"/> of this rectangle is empty (either the width or height are zero)
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Location">
            <summary>
            Gets the location of this rectangle
            </summary>
            <remarks>
            Same as getting the <see cref="P:Eto.Drawing.RectangleF.X"/> and <see cref="P:Eto.Drawing.RectangleF.Y"/> co-ordinates of this rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.EndLocation">
            <summary>
            Gets the ending location of this rectangle
            </summary>
            <remarks>
            This gets/sets the product of the <see cref="P:Eto.Drawing.RectangleF.Location"/> + <see cref="P:Eto.Drawing.RectangleF.Size"/>. If the Width or Height of this rectangle
            is positive, then the X/Y of the returned location will be minus 1 so as to be inside of the rectangle's bounds.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Size">
            <summary>
            Gets or sets the size of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.X">
            <summary>
            Gets or sets the X co-ordinate of the <see cref="P:Eto.Drawing.RectangleF.Location"/> of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Y">
            <summary>
            Gets or sets the Y co-ordinate of the <see cref="P:Eto.Drawing.RectangleF.Location"/> of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Width">
            <summary>
            Gets or sets the Width of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Height">
            <summary>
            Gets or sets the Height of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Top">
            <summary>
            Gets or sets the logical top of this rectangle (Y co-ordinate if Height is positive, Y + Height if negative) 
            </summary>
            <remarks>
            This is always the logical top, where if the <see cref="P:Eto.Drawing.RectangleF.Height"/> is positive it will adjust the Y co-ordinate.
            If the Height of the rectangle is negative, then this will adjust the Height when setting the value.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Left">
            <summary>
            Gets or sets the logical left of this rectangle (X co-ordinate if Width is positive, X + Width if negative)
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Right">
            <summary>
            Gets or sets the logical right of this rectangle (X + Width if Width is positive, X + 1 if negative)
            </summary>
            <remarks>
            This differs from the <seealso cref="P:Eto.Drawing.RectangleF.InnerRight"/> in that this will return the co-ordinate adjacent to the right edge
            of the rectangle, whereas <seealso cref="P:Eto.Drawing.RectangleF.InnerRight"/> returns the co-ordinate that is inside the rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Bottom">
            <summary>
            Gets or sets the logical bottom of this rectangle (Y + Height if Height is positive, Y + 1 if negative)
            </summary>
            <remarks>
            This differs from the <seealso cref="P:Eto.Drawing.RectangleF.InnerBottom"/> in that this will return the co-ordinate adjacent to the bottom edge
            of the rectangle, whereas <seealso cref="P:Eto.Drawing.RectangleF.InnerBottom"/> returns the co-ordinate that is inside the rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.TopLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Top"/> and <see cref="P:Eto.Drawing.RectangleF.Left"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.TopRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Top"/> and <see cref="P:Eto.Drawing.RectangleF.Right"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.BottomRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Bottom"/> and <see cref="P:Eto.Drawing.RectangleF.Right"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.BottomLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Bottom"/> and <see cref="P:Eto.Drawing.RectangleF.Left"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerTopRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Top"/> and <see cref="P:Eto.Drawing.RectangleF.InnerRight"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.TopRight"/> but inside the rectangle's bounds instead of just to the right
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerBottomRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.InnerBottom"/> and <see cref="P:Eto.Drawing.RectangleF.InnerRight"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.BottomRight"/> but inside the rectangle's bounds instead of just to the right and bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerBottomLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.InnerBottom"/> and <see cref="P:Eto.Drawing.RectangleF.Left"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.BottomLeft"/> but inside the rectangle's bounds instead of just below the bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerBottom">
            <summary>
            Gets or sets the bottom of the rectangle that is inside the bounds
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.Bottom"/> but inside the rectangle's bounds instead of just below the bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerRight">
            <summary>
            Gets or sets the right of the rectangle that is inside the bounds
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.Right"/> but inside the rectangle's bounds instead of just to the right
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Center">
            <summary>
            Gets or sets the rectangle's center position
            </summary>
            <remarks>
            This gets/sets the <see cref="P:Eto.Drawing.RectangleF.MiddleX"/> and <see cref="P:Eto.Drawing.RectangleF.MiddleY"/> as a point
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.MiddleX">
            <summary>
            Gets or sets the rectangle's middle horizontal position
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.MiddleY">
            <summary>
            Gets or sets the rectangle's middle vertical position
            </summary>
        </member>
        <member name="T:Eto.Drawing.Size">
            <summary>
            Represents a size with width and height components
            </summary>
        </member>
        <member name="F:Eto.Drawing.Size.Empty">
            <summary>
            Gets an empty size with a zero width and height
            </summary>
        </member>
        <member name="M:Eto.Drawing.Size.Round(Eto.Drawing.SizeF)">
            <summary>
            Converts a floating point <paramref name="size"/> to an integral size by rounding the width and height
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a Size class with rounded width and height values of the specified <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.Truncate(Eto.Drawing.SizeF)">
            <summary>
            Converts a floating point <paramref name="size"/> to an integral size by truncating the width and height
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a Size struct with truncated width and height values of the specified <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.Min(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Returns the minimum width and height of two sizes
            </summary>
            <param name="size1">First size to get the minimum values</param>
            <param name="size2">Second size to get the minimum values</param>
            <returns>A new instance of a Size struct with the minimum width and height of either sizes</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Max(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Returns the maximum width and height of two sizes
            </summary>
            <param name="size1">First size to get the maximum values</param>
            <param name="size2">Second size to get the maximum values</param>
            <returns>A new instance of a Size struct with the maximum width and height of either sizes</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Abs(Eto.Drawing.Size)">
            <summary>
            Returns the absolute width and height of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a Size struct with absolute (positive) width and height</returns>
        </member>
        <member name="M:Eto.Drawing.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new Size class with the specified width and height
            </summary>
            <param name="width">Initial width of the size</param>
            <param name="height">Initial height of the size</param>
        </member>
        <member name="M:Eto.Drawing.Size.#ctor(Eto.Drawing.Point)">
            <summary>
            Initializes a new Size class with width and height corresponding to the <see cref="P:Eto.Drawing.Point.X"/> and <see cref="P:Eto.Drawing.Point.Y"/> of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to convert to a Size struct</param>
        </member>
        <member name="M:Eto.Drawing.Size.Contains(Eto.Drawing.Point)">
            <summary>
            Gets a value indicating that the specified <paramref name="point"/> is within the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of this size
            </summary>
            <param name="point">Point to test</param>
            <returns>True if the <paramref name="point"/> has an X and Y value between 0 and the Width and Height of this size, respectively. False otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Contains(System.Int32,System.Int32)">
            <summary>
            Gets a value indicating that the specified <paramref name="x"/> and <paramref name="y"/> values are within the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of this size
            </summary>
            <param name="x">X value to test</param>
            <param name="y">Y value to test</param>
            <returns>True if the <paramref name="x"/> and <paramref name="y"/> values are between 0 and the Width and Height of this size, respectively. False otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Multiply(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of two sizes
            </summary>
            <param name="size1">First size to multiply</param>
            <param name="size2">Second size to multiply</param>
            <returns>A new instance of a Size struct with the product of both sizes</returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Multiply(Eto.Drawing.Size,System.Int32)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to multiply</param>
            <param name="factor">Factor to multiply both the Width and Height by</param>
            <returns>A new instance of a Size struct with the product of the <paramref name="size"/> and <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Division(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Divides the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of two sizes
            </summary>
            <param name="size1">Size to divide</param>
            <param name="size2">Size to divide by</param>
            <returns>A new instance of a Size struct with the division of <paramref name="size1"/> by <paramref name="size2"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Division(Eto.Drawing.Size,System.Int32)">
            <summary>
            Divides the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to divide</param>
            <param name="factor">Factor to divide both the Width and Height by</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size"/> divided by <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Addition(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Adds the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> values of two sizes together
            </summary>
            <param name="size1">First size to add</param>
            <param name="size2">Second size to add</param>
            <returns>A new instance of a Size struct with the addition of the width and height of both sizes</returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Subtraction(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Subtracts the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> value of one size from another
            </summary>
            <param name="size1">Size to subtract from</param>
            <param name="size2">Size to subtract</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size1"/> minus <paramref name="size2"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Subtraction(Eto.Drawing.Size,System.Int32)">
            <summary>
            Subtracts a <paramref name="value"/> from the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to subtract from</param>
            <param name="value">Value to subtract from the width and height</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size"/> minus <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Addition(Eto.Drawing.Size,System.Int32)">
            <summary>
            Adds a <paramref name="value"/> to the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to add to</param>
            <param name="value">Value to add to the width and height</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size"/> plus <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Equality(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Compares two sizes for equality
            </summary>
            <param name="size1">First size to compare</param>
            <param name="size2">Second size to compare</param>
            <returns>True if both the width and height of both sizes are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Inequality(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Compares two sizes for inequality
            </summary>
            <param name="size1">First size to compare</param>
            <param name="size2">Second size to compare</param>
            <returns>True if either the width and height of both sizes are not equal, false if they are both equal</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Equals(System.Object)">
            <summary>
            Compares this size to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the specified <paramref name="obj"/> is a Size and is equal to this instance</returns>
        </member>
        <member name="M:Eto.Drawing.Size.GetHashCode">
            <summary>
            Gets the hash code for this Size
            </summary>
            <returns>Hash code value for this size</returns>
        </member>
        <member name="M:Eto.Drawing.Size.ToString">
            <summary>
            Converts this Size struct to a string
            </summary>
            <returns>String representation of this Size</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Equals(Eto.Drawing.Size)">
            <summary>
            Compares this size to the <paramref name="other"/> size
            </summary>
            <param name="other">Other size to compare with</param>
            <returns>True if the <paramref name="other"/> size is equal to this instance</returns>
        </member>
        <member name="P:Eto.Drawing.Size.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:Eto.Drawing.Size.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="P:Eto.Drawing.Size.IsZero">
            <summary>
            Gets a value indicating that both the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> are zero
            </summary>
        </member>
        <member name="P:Eto.Drawing.Size.IsEmpty">
            <summary>
            Gets a value indicating that either the <see cref="P:Eto.Drawing.Size.Width"/> or <see cref="P:Eto.Drawing.Size.Height"/> are zero
            </summary>
        </member>
        <member name="T:Eto.Drawing.SizeF">
            <summary>
            Represents a floating point size with width and height components
            </summary>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Implicit(Eto.Drawing.Size)~Eto.Drawing.SizeF">
            <summary>
            Implicitly converts the specified integral <paramref name="size"/> to a floating point <see cref="T:Eto.Drawing.SizeF"/>
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a floating point SizeF with the same value as the specified <paramref name="size"/></returns>
        </member>
        <member name="F:Eto.Drawing.SizeF.Empty">
            <summary>
            Gets an empty size with a zero width and height
            </summary>
        </member>
        <member name="M:Eto.Drawing.SizeF.Min(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Returns the minimum width and height of two sizes
            </summary>
            <param name="size1">First size to get the minimum values</param>
            <param name="size2">Second size to get the minimum values</param>
            <returns>A new instance of a Size struct with the minimum width and height of either sizes</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Max(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Returns the maximum width and height of two sizes
            </summary>
            <param name="size1">First size to get the maximum values</param>
            <param name="size2">Second size to get the maximum values</param>
            <returns>A new instance of a Size struct with the maximum width and height of either sizes</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Abs(Eto.Drawing.SizeF)">
            <summary>
            Returns the absolute width and height of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a Size struct with absolute (positive) width and height</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new SizeF class with the specified width and height
            </summary>
            <param name="width">Initial width of the size</param>
            <param name="height">Initial height of the size</param>
        </member>
        <member name="M:Eto.Drawing.SizeF.#ctor(Eto.Drawing.PointF)">
            <summary>
            Initializes a new SizeF class with width and height corresponding to the <see cref="P:Eto.Drawing.PointF.X"/> and <see cref="P:Eto.Drawing.PointF.Y"/> of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to convert to a SizeF struct</param>
        </member>
        <member name="M:Eto.Drawing.SizeF.Contains(Eto.Drawing.PointF)">
            <summary>
            Gets a value indicating that the specified <paramref name="point"/> is within the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of this size
            </summary>
            <param name="point">Point to test</param>
            <returns>True if the <paramref name="point"/> has an X and Y value between 0 and the Width and Height of this size, respectively. False otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Contains(System.Single,System.Single)">
            <summary>
            Gets a value indicating that the specified <paramref name="x"/> and <paramref name="y"/> values are within the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of this size
            </summary>
            <param name="x">X value to test</param>
            <param name="y">Y value to test</param>
            <returns>True if the <paramref name="x"/> and <paramref name="y"/> values are between 0 and the Width and Height of this size, respectively. False otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Multiply(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of two sizes
            </summary>
            <param name="size1">First size to multiply</param>
            <param name="size2">Second size to multiply</param>
            <returns>A new instance of a SizeF struct with the product of both sizes</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Multiply(Eto.Drawing.SizeF,System.Single)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to multiply</param>
            <param name="factor">Factor to multiply both the Width and Height by</param>
            <returns>A new instance of a SizeF struct with the product of the <paramref name="size"/> and <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Division(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Divides the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of two sizes
            </summary>
            <param name="size1">Size to divide</param>
            <param name="size2">Size to divide by</param>
            <returns>A new instance of a SizeF struct with the division of <paramref name="size1"/> by <paramref name="size2"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Division(Eto.Drawing.SizeF,System.Single)">
            <summary>
            Divides the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to divide</param>
            <param name="factor">Factor to divide both the Width and Height by</param>
            <returns>A new instance of a SizeF struct with the width and height of <paramref name="size"/> divided by <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Addition(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Adds the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> values of two sizes together
            </summary>
            <param name="size1">First size to add</param>
            <param name="size2">Second size to add</param>
            <returns>A new instance of a SizeF struct with the addition of the width and height of both sizes</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Subtraction(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Subtracts the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> value of one size from another
            </summary>
            <param name="size1">Size to subtract from</param>
            <param name="size2">Size to subtract</param>
            <returns>A new instance of a SizeF struct with the width and height of <paramref name="size1"/> minus <paramref name="size2"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Subtraction(Eto.Drawing.SizeF,System.Single)">
            <summary>
            Subtracts a <paramref name="value"/> from the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to subtract from</param>
            <param name="value">Value to subtract from the width and height</param>
            <returns>A new instance of a SizeF struct with the width and height of <paramref name="size"/> minus <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Addition(Eto.Drawing.SizeF,System.Single)">
            <summary>
            Adds a <paramref name="value"/> to the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to add to</param>
            <param name="value">Value to add to the width and height</param>
            <returns>A new instance of a SizeF struct with the width and height of <paramref name="size"/> plus <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Equality(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Compares two sizes for equality
            </summary>
            <param name="size1">First size to compare</param>
            <param name="size2">Second size to compare</param>
            <returns>True if both the width and height of both sizes are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Inequality(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Compares two sizes for inequality
            </summary>
            <param name="size1">First size to compare</param>
            <param name="size2">Second size to compare</param>
            <returns>True if either the width and height of both sizes are not equal, false if they are both equal</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Equals(System.Object)">
            <summary>
            Compares this size to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the specified <paramref name="obj"/> is a Size and is equal to this instance</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.GetHashCode">
            <summary>
            Gets the hash code for this Size
            </summary>
            <returns>Hash code value for this size</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.ToString">
            <summary>
            Converts this Size struct to a string
            </summary>
            <returns>String representation of this SizeF</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Equals(Eto.Drawing.SizeF)">
            <summary>
            Compares this size to the <paramref name="other"/> size
            </summary>
            <param name="other">Other size to compare with</param>
            <returns>True if the <paramref name="other"/> size is equal to this instance</returns>
        </member>
        <member name="P:Eto.Drawing.SizeF.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:Eto.Drawing.SizeF.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="P:Eto.Drawing.SizeF.IsZero">
            <summary>
            Gets a value indicating that both the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> are zero
            </summary>
        </member>
        <member name="P:Eto.Drawing.SizeF.IsEmpty">
            <summary>
            Gets a value indicating that either the <see cref="P:Eto.Drawing.SizeF.Width"/> or <see cref="P:Eto.Drawing.SizeF.Height"/> are zero
            </summary>
        </member>
        <member name="T:Eto.Drawing.BitmapData">
            <summary>
            Bitmap data information when accessing a <see cref="T:Eto.Drawing.Bitmap"/>'s data directly
            </summary>
            <remarks>
            The bitmap data is accessed through <see cref="M:Eto.Drawing.Bitmap.Lock"/>, which locks the data
            for direct access using the <see cref="P:Eto.Drawing.BitmapData.Data"/> pointer.
            
            Ensure you call <see cref="M:Eto.Drawing.Bitmap.Unlock(Eto.Drawing.BitmapData)"/> with the same instance when you are done
            accessing or writing the data.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.BitmapData.#ctor(System.IntPtr,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the BitmapData class
            </summary>
            <param name="data">Pointer to the bitmap data</param>
            <param name="scanWidth">Width of each scan row, in bytes</param>
            <param name="controlObject">Platform specific object for the bitmap data (if any)</param>
        </member>
        <member name="M:Eto.Drawing.BitmapData.TranslateArgbToData(System.UInt32)">
            <summary>
            Translates a 32-bit ARGB value to the platform specific pixel format value
            </summary>
            <remarks>
            Use this method to translate an ARGB (Alpha in most significant) to the value
            required by the bitmap for the pixel.
            
            Each platform can have a different pixel format, and this allows you to abstract 
            setting the data directly.
            
            The ARGB value can be easily retrieved using <see cref="M:Eto.Drawing.Color.ToArgb"/>.
            
            For non-alpha bitmaps, the alpha component will be ignored
            </remarks>
            <param name="argb">ARGB pixel value to translate into the platform-specific format</param>
            <returns>Platform-specific format of the pixels that can be set directly onto the data</returns>
        </member>
        <member name="M:Eto.Drawing.BitmapData.TranslateDataToArgb(System.UInt32)">
            <summary>
            Translates the platform specific pixel format to a 32-bit ARGB value
            </summary>
            <remarks>
            Use this method to translate an value from the bitmap data to a 32-bit ARGB (Alpha in most significant byte).
            
            Each platform can have a different pixel format, and this allows you to abstract 
            getting the data into a 32-bit colour.
            
            The ARGB value can be easily handled using <see cref="C:Color(uint)"/>.
            
            For non-alpha bitmaps, the alpha component will be ignored
            </remarks>
            <param name="bitmapData">Platform specific bitmap data for a pixel to translate</param>
            <returns>Translated ARGB value from the bitmap data</returns>
        </member>
        <member name="P:Eto.Drawing.BitmapData.Data">
            <summary>
            Gets the pointer to the data of the bitmap
            </summary>
            <remarks>
            This does not include any headers, etc. so it directly points to the beginning of the data.
            
            Each row may not be on a pixel boundary, so to increment to the next row, use the <see cref="P:Eto.Drawing.BitmapData.ScanWidth"/>
            to increment the pointer to the next row.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.BitmapData.Flipped">
            <summary>
            Gets a value indicating that the data is flipped (upside down)
            </summary>
            <remarks>
            Some platforms may handle memory bitmaps in a flipped fashion, such that the top of the image
            is at the bottom of the data.
            
            If this is true, then the starting row of the data is the bottom row of the image.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.BitmapData.ScanWidth">
            <summary>
            Gets the width (in bytes) of each scan line (row) of pixel data
            </summary>
            <remarks>
            When advancing to the next row, use this to increment the pointer.  The number of bytes
            for each row might not be equivalent to the bytes per pixel multiplied by the width of the image.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.BitmapData.ControlObject">
            <summary>
            Gets the platform-specific control object for the bitmap data
            </summary>
        </member>
        <member name="T:Eto.Drawing.XmlExtensions">
            <summary>
            Xml extensions to read/write Eto.Drawing structs to xml
            </summary>
        </member>
        <member name="M:Eto.Drawing.XmlExtensions.GetSizeAttributes(System.Xml.XmlElement,System.String)">
            <summary>
            Gets a <see cref="T:Eto.Drawing.Size"/> struct as a set of attributes of the specified <paramref name="element"/>
            </summary>
            <remarks>
            This will read attributes with suffixes "-width" and "-height" prefixed by <paramref name="baseName"/>.
            For example, if you specify "myProperty" as the base name, then it will read attributes "myProperty-width" and "myProperty-height".
            
            Both the width and height must be specified as attributes for this to return a value.
            </remarks>
            <param name="element">Element to read the width and height attributes from</param>
            <param name="baseName">Base attribute name prefix</param>
            <returns>A size struct if both the width and height attributes are specified, or null otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.XmlExtensions.SetSizeAttributes(System.Xml.XmlElement,System.String,System.Nullable{Eto.Drawing.Size})">
            <summary>
            Sets attributes on the specified <paramref name="element"/> with values from the <see cref="!:value"/>
            </summary>
            <remarks>
            This will write attributes with suffixes "-width" and "-height" prefixed by <paramref name="baseName"/>.
            For example, if you specify "myProperty" as the base name, then it will write attributes "myProperty-width" and "myProperty-height".
            
            Passing null as the size will not write either attribute value.
            </remarks>
            <param name="element">Element to write the width and height attributes on</param>
            <param name="baseName">Base attribute name prefix</param>
            <returns>A size struct if both the width and height attributes are specified, or null otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.XmlExtensions.WriteChildSizeXml(System.Xml.XmlElement,System.String,System.Nullable{Eto.Drawing.Size})">
            <summary>
            Writes the specified size <paramref name="value"/> to a child of the specified <paramref name="element"/> with the given name
            </summary>
            <remarks>
            The child element will contain "width" and "height" attributes for the value of the size.
            If the value is null, no child element will be written.
            </remarks>
            <param name="element">Element to append the child element to if <paramref name="value"/> is not null</param>
            <param name="elementName">Name of the element to append</param>
            <param name="value">Size value to write</param>
        </member>
        <member name="M:Eto.Drawing.XmlExtensions.ReadChildSizeXml(System.Xml.XmlElement,System.String)">
            <summary>
            Reads a child of the <paramref name="element"/> with the given <paramref name="elementName"/> as a <see cref="T:Eto.Drawing.Size"/>
            </summary>
            <remarks>
            The child element must contain both "width" and "height" attributes for the value of the size.
            </remarks>
            <param name="element">Element to append the child element to if <paramref name="value"/> is not null</param>
            <param name="elementName">Name of the element to append</param>
            <returns>A new Size struct if the element exists, or null if not</returns>
        </member>
        <member name="T:Eto.Drawing.IGraphicsPath">
            <summary>
            Platform handler interface for the <see cref="T:Eto.Drawing.GraphicsPath"/> class
            </summary>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddLines(System.Collections.Generic.IEnumerable{Eto.Drawing.Point})">
            <summary>
            Adds the <paramref name="lines"/> to the path 
            </summary>
            <param name="lines"></param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddLine(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Adds a single line to the path
            </summary>
            <param name="point1">Starting point for the line</param>
            <param name="point2">Ending point for the line</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.LineTo(Eto.Drawing.Point)">
            <summary>
            Adds a line to the specified <paramref name="point"/> from the last location
            </summary>
            <param name="point">Ending point for the line</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.MoveTo(Eto.Drawing.Point)">
            <summary>
            Moves the current position to the specified <paramref name="point"/>, without adding anything to the path
            </summary>
            <param name="point">Location to move the current position</param>
        </member>
        <member name="T:Eto.Drawing.GraphicsPath">
            <summary>
            Defines primitives that can be used to draw or fill a path on a <see cref="T:Eto.Drawing.Graphics"/> object
            </summary>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.#ctor">
            <summary>
            Initializes a new instance of the GraphicsPath class
            </summary>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.#ctor(Eto.Generator)">
            <summary>
            Initializes a new instance of the GraphicsPath class
            </summary>
            <param name="generator">Platform generator for the object</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.MoveTo(Eto.Drawing.Point)">
            <summary>
            Moves the current position to the specified <paramref name="point"/>, without adding anything to the path
            </summary>
            <param name="point">Location to move the current position</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.LineTo(Eto.Drawing.Point)">
            <summary>
            Adds a line to the specified <paramref name="point"/> from the last location
            </summary>
            <param name="point">Ending point for the line</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddLine(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Adds a single line to the path
            </summary>
            <param name="point1">Starting point for the line</param>
            <param name="point2">Ending point for the line</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddLines(System.Collections.Generic.IEnumerable{Eto.Drawing.Point})">
            <summary>
            Adds the <paramref name="lines"/> to the path 
            </summary>
            <param name="lines"></param>
        </member>
        <member name="T:Eto.Drawing.ColorHSB">
            <summary>
            Color representation in HSB color model
            </summary>
            <remarks>
            This allows you to manage a color in the HSB (otherwise known as HSV) cylindrical model.
            
            This is a helper class to handle HSB colors. Whenever a color is used it must be
            converted to a <see cref="T:Eto.Drawing.Color"/> struct first, either by using <see cref="M:Eto.Drawing.ColorHSB.ToColor"/>
            or the implicit conversion.
            </remarks>
        </member>
        <member name="F:Eto.Drawing.ColorHSB.Empty">
            <summary>
            Obsolete. Do not use
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.Distance(Eto.Drawing.ColorHSB,Eto.Drawing.ColorHSB)">
            <summary>
            Calculates the 'distance' of two HSB colors
            </summary>
            <remarks>
            This is useful for comparing two different color values to determine if they are similar.
            
            Typically though, <see cref="M:Eto.Drawing.ColorHSL.Distance(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)"/> gives the best result instead of this method.
            </remarks>
            <param name="value1">First color to compare</param>
            <param name="value2">Second color to compare</param>
            <returns>The overall distance/difference between the two colours. A lower value indicates a closer match</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the ColorHSB class
            </summary>
            <param name="hue">Hue component (0-360)</param>
            <param name="saturation">Saturation component (0-1)</param>
            <param name="brightness">Brightness component (0-1)</param>
            <param name="alpha">Alpha component (0-1)</param>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.#ctor(Eto.Drawing.Color)">
            <summary>
            Initializes a new instance of the ColorHSB class with the same color values as <paramref name="color"/>
            </summary>
            <param name="color">RBG Color value to convert to HSB</param>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.ToColor">
            <summary>
            Converts this instance to an equivalent RGB <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Color"/> with an equivalent color</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.op_Equality(Eto.Drawing.ColorHSB,Eto.Drawing.ColorHSB)">
            <summary>
            Compares two instances of the <see cref="T:Eto.Drawing.ColorHSB"/> for equality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Secont color to compare</param>
            <returns>True if both instances are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.op_Inequality(Eto.Drawing.ColorHSB,Eto.Drawing.ColorHSB)">
            <summary>
            Compares two instances of the <see cref="T:Eto.Drawing.ColorHSB"/> for inequality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Secont color to compare</param>
            <returns>True if the instances are not equal, false if they are equal</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.op_Implicit(Eto.Drawing.ColorHSB)~Eto.Drawing.Color">
            <summary>
            Implicitly converts from a ColorHSB to a <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="hsb">HSB color instance to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Color"/> that represents the <paramref name="hsb"/> value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.op_Implicit(Eto.Drawing.Color)~Eto.Drawing.ColorHSB">
            <summary>
            Implicitly converts from a <see cref="T:Eto.Drawing.Color"/> to a ColorHSB
            </summary>
            <param name="color">RGB color value to convert</param>
            <returns>A new instance of a ColorHSB that represents the RGB <paramref name="color"/> value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.Equals(System.Object)">
            <summary>
            Compares an object to determine equality with this instance
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the object is equal to this instance's value, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.GetHashCode">
            <summary>
            Gets the hash code for this object
            </summary>
            <returns>Hash code to use for this object</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.Equals(Eto.Drawing.ColorHSB)">
            <summary>
            Compares a ColorHSB for equality
            </summary>
            <param name="other">Other instance to compare with</param>
            <returns>True if <paramref name="other"/> is equal to this instance's value, false otherwise</returns>
        </member>
        <member name="P:Eto.Drawing.ColorHSB.A">
            <summary>
            Gets or sets the alpha (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSB.H">
            <summary>
            Gets or sets the hue (0-360)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSB.S">
            <summary>
            Gets or sets the saturation (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSB.B">
            <summary>
            Gets or sets the brightness (0-1)
            </summary>
        </member>
        <member name="T:Eto.Drawing.ColorHSL">
            <summary>
            Color representation in the HSL color model
            </summary>
            <remarks>
            This allows you to manage a color in the HSL cylindrical model.
            
            This is a helper class to handle HSL colors. Whenever a color is used it must be
            converted to a <see cref="T:Eto.Drawing.Color"/> struct first, either by using <see cref="M:Eto.Drawing.ColorHSL.ToColor"/>
            or the implicit conversion.
            </remarks>
        </member>
        <member name="F:Eto.Drawing.ColorHSL.Empty">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.Distance(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)">
            <summary>
            Calculates the 'distance' of two HSL colors
            </summary>
            <remarks>
            This is useful for comparing two different color values to determine if they are similar.
            
            The HSL comparison algorithm, while not essentially accurate, gives a good representation of like-colours
            to the human eye. This method of calculating distance is preferred over the other methods (RGB, CMYK, HSB)
            </remarks>
            <param name="value1">First color to compare</param>
            <param name="value2">Second color to compare</param>
            <returns>The overall distance/difference between the two colours. A lower value indicates a closer match</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the ColorHSL class
            </summary>
            <param name="hue">Hue component (0-360)</param>
            <param name="saturation">Saturation component (0-1)</param>
            <param name="luminance">Luminace component (0-1)</param>
            <param name="alpha">Alpha component (0-1)</param>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.#ctor(Eto.Drawing.Color)">
            <summary>
            Initializes a new instance of the ColorHSL class with converted HSL values from a <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="color">RGB color to convert to HSL</param>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.ToColor">
            <summary>
            Converts this HSL color to a RGB <see cref="T:Eto.Drawing.Color"/> value
            </summary>
            <returns>A new instance of an RGB <see cref="T:Eto.Drawing.Color"/> converted from HSL</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.op_Equality(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)">
            <summary>
            Compares two <see cref="T:Eto.Drawing.ColorHSL"/> objects for equality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Second color to compare</param>
            <returns>True if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.op_Inequality(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)">
            <summary>
            Compares two <see cref="T:Eto.Drawing.ColorHSL"/> objects for equality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Second color to compare</param>
            <returns>True if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.op_Implicit(Eto.Drawing.ColorHSL)~Eto.Drawing.Color">
            <summary>
            Implicitly converts a <see cref="T:Eto.Drawing.ColorHSL"/> to an RGB <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="hsl">HSL Color to convert</param>
            <returns>An RGB color converted from the specified <paramref name="hsl"/> color</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.op_Implicit(Eto.Drawing.Color)~Eto.Drawing.ColorHSL">
            <summary>
            Implicitly converts from a <see cref="T:Eto.Drawing.Color"/> to a ColorHSL
            </summary>
            <param name="color">RGB color value to convert</param>
            <returns>A new instance of a ColorHSL that represents the RGB <paramref name="color"/> value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.Equals(System.Object)">
            <summary>
            Compares the given object for equality with this object
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the object is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.GetHashCode">
            <summary>
            Gets the hash code for this object
            </summary>
            <returns>Hash code for this object</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.Equals(Eto.Drawing.ColorHSL)">
            <summary>
            Compares the given object for equality with this object
            </summary>
            <param name="other">Object to compare with</param>
            <returns>True if the object is equal to this instance, false otherwise</returns>
        </member>
        <member name="P:Eto.Drawing.ColorHSL.A">
            <summary>
            Gets or sets the alpha (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSL.H">
            <summary>
            Gets or sets the hue (0-360)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSL.S">
            <summary>
            Gets or sets the saturation (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSL.L">
            <summary>
            Gets or sets the luminance (0-1)
            </summary>
        </member>
        <member name="T:Eto.Drawing.ColorCMYK">
            <summary>
            Represents a color in the CMYK color model.
            </summary>
            <remarks>
            This is a helper class to handle CMYK colors. Whenever a color is used it must be
            converted to a <see cref="T:Eto.Drawing.Color"/> struct first, either by using <see cref="M:Eto.Drawing.ColorCMYK.ToColor"/>
            or the implicit conversion.
            </remarks>
        </member>
        <member name="F:Eto.Drawing.ColorCMYK.Empty">
            <summary>
            An empty color with zero for all components
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.Distance(Eto.Drawing.ColorCMYK,Eto.Drawing.ColorCMYK)">
            <summary>
            Calculates the 'distance' of two CMYK colors
            </summary>
            <remarks>
            This is useful for comparing two different color values to determine if they are similar.
            
            Typically though, <see cref="M:Eto.Drawing.ColorHSL.Distance(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)"/> gives the best result instead of this method.
            </remarks>
            <param name="value1">First color to compare</param>
            <param name="value2">Second color to compare</param>
            <returns>The overall distance/difference between the two colours. A lower value indicates a closer match</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the ColorCMYK class
            </summary>
            <param name="cyan">Cyan component</param>
            <param name="magenta">Magenta component</param>
            <param name="yellow">Yellow component</param>
            <param name="black">Key/black component</param>
            <param name="alpha">Alpha component</param>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.#ctor(Eto.Drawing.Color)">
            <summary>
            Initializes a new instance of the ColorCMYK with the specified RGB <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="color">Color to convert from</param>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.ToColor">
            <summary>
            Gets this object as an ARGB color value
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.op_Equality(Eto.Drawing.ColorCMYK,Eto.Drawing.ColorCMYK)">
            <summary>
            Compares two colors for equality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Second color to compare</param>
            <returns>true if the two colors are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.op_Inequality(Eto.Drawing.ColorCMYK,Eto.Drawing.ColorCMYK)">
            <summary>
            Compares two colors for inequality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Second color to compare</param>
            <returns>true if the two colors are not equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.op_Implicit(Eto.Drawing.ColorCMYK)~Eto.Drawing.Color">
            <summary>
            Converts this instance to an ARGB color value
            </summary>
            <param name="cmyk">cmyk value to convert</param>
            <returns>A new instance of the Color class with the converted value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.op_Implicit(Eto.Drawing.Color)~Eto.Drawing.ColorCMYK">
            <summary>
            Converts this an ARGB color value to a CMYK value
            </summary>
            <param name="color">RGB value to convert</param>
            <returns>A new instance of the ColorCMYK class with the converted value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.Equals(System.Object)">
            <summary>
            Returns a value indicating that this is equal to the specified object
            </summary>
            <param name="obj">object to compare with</param>
            <returns>true if the colours are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.GetHashCode">
            <summary>
            Gets the hash code for this object
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.Equals(Eto.Drawing.ColorCMYK)">
            <summary>
            Returns a value indicating that this is equal to the specified color
            </summary>
            <param name="other">ColorCMYK to compare with</param>
            <returns>True if the colours are equal, false otherwise</returns>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.C">
            <summary>
            Cyan component
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.M">
            <summary>
            Magenta component
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.Y">
            <summary>
            Yellow component
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.K">
            <summary>
            Key (black) component
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.A">
            <summary>
            Alpha component
            </summary>
        </member>
        <member name="T:Eto.Drawing.ColorConverter">
            <summary>
            Converts instances of other types to and from a <see cref="T:Eto.Drawing.Color"/>.
            </summary>
            <remarks>
            This only supports converting from a string supported by the <see cref="M:Eto.Drawing.Color.TryParse(System.String,Eto.Drawing.Color@,System.Globalization.CultureInfo)"/> method.
            
            When converting to a string, it converts to a Hex format via <see cref="M:Eto.Drawing.Color.ToHex(System.Boolean)"/>
            </remarks>
        </member>
        <member name="M:Eto.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this can convert a <see cref="T:Eto.Drawing.Color"/> to the <paramref name="destinationType"/>
            </summary>
            <param name="context">Context of the conversion</param>
            <param name="destinationType">Type to convert to</param>
            <returns>True if this converter supports the <paramref name="destinationType"/>, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this can convert a value with the type of <paramref name="sourceType"/> to a <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="context">Context of the conversion</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this can convert to the <paramref name="sourceType"/>, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the <paramref name="value"/> to an instance of a <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="context">Context of the conversion</param>
            <param name="culture">Culture to use for the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A <see cref="T:Eto.Drawing.Color"/> instance with the converted value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a <see cref="T:Eto.Drawing.Color"/> instance to the specified <paramref name="destinationType"/>
            </summary>
            <param name="context">Context of the conversion</param>
            <param name="culture">Culture to use for the conversion</param>
            <param name="value"><see cref="T:Eto.Drawing.Color"/> value to convert</param>
            <param name="destinationType">Type to convert the <paramref name="value"/> to</param>
            <returns>An object of type <paramref name="destinationType"/> converted from <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.SizeConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.Size"/> class
            </summary>
            <remarks>
            Allows for conversion from a string to a <see cref="T:Eto.Drawing.Size"/>.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.Size"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Size"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.SizeFConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.SizeF"/> class
            </summary>
            <remarks>
            Allows for conversion from a string to a <see cref="T:Eto.Drawing.SizeF"/>.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.SizeF"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.SizeF"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.RectangleConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.Rectangle"/> class
            </summary>
            <remarks>
            Allows for conversion from a string to a <see cref="T:Eto.Drawing.Rectangle"/>.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.Rectangle"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Rectangle"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.RectangleFConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.RectangleF"/> class
            </summary>
            <remarks>
            Allows for conversion from a string to a <see cref="T:Eto.Drawing.RectangleF"/>.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.RectangleFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.RectangleF"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.RectangleF"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.PointConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.Point"/> class
            </summary>
            <remarks>
            Allows conversion from a string to a <see cref="T:Eto.Drawing.Point"/> via json/xaml or other sources.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.Point"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Point"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.PointFConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.PointF"/> class
            </summary>
            <remarks>
            Allows conversion from a string to a <see cref="T:Eto.Drawing.PointF"/> via json/xaml or other sources.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.PointFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.PointFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.PointF"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.PointF"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.PaddingConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.Padding"/> class
            </summary>
        </member>
        <member name="M:Eto.Drawing.PaddingConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if the specified <paramref name="sourceType"/> can be converted to a <see cref="T:Eto.Drawing.Padding"/> object
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.PaddingConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.Padding"/> object
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion for</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of the <see cref="T:Eto.Drawing.Padding"/> object with the value represented by <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.CollectionChangedHandler`2">
            <summary>
            Class to help implement collection changed events on a data store
            </summary>
            <remarks>
            This is used for the platform handler of controls that use collections.
            This class helps detect changes to a collection so that the appropriate action
            can be taken to update the UI with the changes.
            
            This is a simple helper that is much easier to implement than handling
            the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event directly.
            </remarks>
            <typeparam name="I">Type of the items in the collection</typeparam>
            <typeparam name="C">Type of the collection</typeparam>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.OnRegisterCollection(System.EventArgs)">
            <summary>
            Called when the object has been registered (attached) to a collection
            </summary>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.OnUnregisterCollection(System.EventArgs)">
            <summary>
            Called when the object has unregistered the collection
            </summary>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.Register(`1)">
            <summary>
            Registers a specific collection to observe
            </summary>
            <param name="collection">collection to observe</param>
            <returns>true if the collection was registered, false otherwise</returns>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.Unregister">
            <summary>
            Unregisters the current registered collection
            </summary>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.IndexOf(`0)">
            <summary>
            Gets the index of the specified item
            </summary>
            <param name="item">Item to find the index of</param>
            <returns>Index of the item if contained in the collection, otherwise -1</returns>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.InternalIndexOf(`0)">
            <summary>
            Gets the index of the item from the collection
            </summary>
            <remarks>
            Implementors should implement this to get the index of the item
            </remarks>
            <param name="item">Item to find the index</param>
            <returns>index of the item in the collection, or -1 if the item is not found</returns>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.AddItem(`0)">
            <summary>
            Adds the item to the end of the collection
            </summary>
            <param name="item">Item to add to the collection</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index in the collection
            </summary>
            <param name="index">Index to insert the item to</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">Index of the item to remove</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveAllItems">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveItem(`0)">
            <summary>
            Removes the specified item
            </summary>
            <remarks>
            This will remove the item by finding the index and removing based on index.
            Implementors should override this method if there is a faster mechanism to do so.
            </remarks>
            <param name="item">Item to remove from the collection</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to the end of the collection
            </summary>
            <remarks>
            This simply calls <see cref="M:Eto.CollectionChangedHandler`2.AddItem(`0)"/> for each item in the list.  If there
            is a faster mechanism for doing so, implementors should override this method.
            
            For example, sometimes adding a single item will update the UI for each item, this
            should be overridden so the UI is updated after all items have been added.
            </remarks>
            <param name="items">Enumeration of items to add to the end of the collection</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple items to the specified index in the collection
            </summary>
            <remarks>
            This simply calls <see cref="M:Eto.CollectionChangedHandler`2.InsertItem(System.Int32,`0)"/> for each item in the list.  If there
            is a faster mechanism for doing so, implementors should override this method.
            
            For example, sometimes inserting a single item will update the UI for each item, this
            should be overridden so the UI is updated after all items have been inserted.
            </remarks>
            <param name="index">Index to start adding the items</param>
            <param name="items">Enumeration of items to add</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a specified count of items from the collection starting at the specified index
            </summary>
            <remarks>
            This simply calls <see cref="M:Eto.CollectionChangedHandler`2.RemoveItem(System.Int32)"/> for each item to remove.  If there
            is a faster mechanism for doing so, implementors should override this method.
            
            For example, sometimes removing a single item will update the UI for each item, this
            should be overridden so the UI is updated after all items have been removed.
            </remarks>
            <param name="index">Index to start removing the items from</param>
            <param name="count">Number of items to remove</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified items from the collection
            </summary>
            <remarks>
            This simply calls <see cref="M:Eto.CollectionChangedHandler`2.RemoveItem(`0)"/> for each item to remove.  If there
            is a faster mechanism for doing so, implementors should override this method.
            
            For example, sometimes removing a single item will update the UI for each item, this
            should be overridden so the UI is updated after all items have been removed.
            </remarks>
            <param name="items">List of items to remove</param>
        </member>
        <member name="P:Eto.CollectionChangedHandler`2.Collection">
            <summary>
            Gets the collection that this handler is observing
            </summary>
        </member>
        <member name="T:Eto.EnumerableChangedHandler`2">
            <summary>
            Class to help implement change handling on an <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <remarks>
            This is used for the platform handler of controls that use collections.
            This class helps detect changes to a collection so that the appropriate action
            can be taken to update the UI with the changes.
            
            Use this class as a base when you only have an <see cref="T:System.Collections.IEnumerable"/>.  If the object
            also implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> it will get changed events
            otherwise you must register a new collection each time.
            </remarks>
            <typeparam name="I">Type of each item in the enumerable</typeparam>
            <typeparam name="C">Type of collection</typeparam>
        </member>
        <member name="M:Eto.EnumerableChangedHandler`2.InternalIndexOf(`0)">
            <summary>
            Implements the mechanism for finding the index of an item (the slow way)
            </summary>
            <remarks>
            If the collection object implements <see cref="T:System.Collections.IList"/>, this will not get called
            as it will call it's method of getting the index.  This is used as a fallback.
            </remarks>
            <param name="item">Item to find in the collection</param>
            <returns>Index of the item, or -1 if not found</returns>
        </member>
        <member name="M:Eto.EnumerableChangedHandler`2.OnRegisterCollection(System.EventArgs)">
            <summary>
            Called when the collection is registered
            </summary>
        </member>
        <member name="T:Eto.DataStoreChangedHandler`2">
            <summary>
            Class to help implement change handling for a <see cref="T:Eto.Forms.IDataStore`1"/>
            </summary>
            <remarks>
            This is used for the platform handler of controls that use collections.
            This class helps detect changes to a collection so that the appropriate action
            can be taken to update the UI with the changes.
            
            Use this class as a base when you are detecting changes for an <see cref="T:Eto.Forms.IDataStore`1"/>.
            If the object also implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>, it will get changed events.
            Otherwise, you must register a new collection each time.
            </remarks>
            <typeparam name="I">Type of items in the data store</typeparam>
            <typeparam name="C">Type of the data store to detect changes on</typeparam>
        </member>
        <member name="M:Eto.DataStoreChangedHandler`2.OnRegisterCollection(System.EventArgs)">
            <summary>
            Called when the collection is registered
            </summary>
        </member>
        <member name="M:Eto.DataStoreChangedHandler`2.InternalIndexOf(`0)">
            <summary>
            Implements the mechanism for finding the index of an item (the slow way)
            </summary>
            <remarks>
            If the collection object implements <see cref="T:System.Collections.IList"/>, this will not get called
            as it will call it's method of getting the index.  This is used as a fallback.
            </remarks>
            <param name="item">Item to find in the collection</param>
            <returns>Index of the item, or -1 if not found</returns>
        </member>
        <member name="T:Eto.Forms.AddValueEventArgs`1">
            <summary>
            Arguments for controlling whether values should be added to a list or control
            </summary>
        </member>
        <member name="M:Eto.Forms.AddValueEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the AddValueEventArgs class
            </summary>
            <param name="value">value to be added</param>
            <param name="shouldAdd">true if by default the item will be added, false otherwise</param>
        </member>
        <member name="P:Eto.Forms.AddValueEventArgs`1.Value">
            <summary>
            Value being added to the combo box
            </summary>
        </member>
        <member name="P:Eto.Forms.AddValueEventArgs`1.ShouldAdd">
            <summary>
            True if the value should be added, false otherwise
            </summary>
        </member>
        <member name="T:Eto.Forms.EnumComboBox`1">
            <summary>
            Combo box for an enumeration
            </summary>
            <typeparam name="T">Enumeration type to fill the values with</typeparam>
        </member>
        <member name="M:Eto.Forms.EnumComboBox`1.OnAddValue(Eto.Forms.AddValueEventArgs{`0})">
            <summary>
            Handles the <see cref="E:Eto.Forms.EnumComboBox`1.AddValue"/> event
            </summary>
        </member>
        <member name="M:Eto.Forms.EnumComboBox`1.#ctor">
            <summary>
            Initializes a new instance of the EnumComboBox
            </summary>
        </member>
        <member name="M:Eto.Forms.EnumComboBox`1.#ctor(Eto.Generator)">
            <summary>
            Initializes a new instance of the EnumComboBox with the specified generator
            </summary>
            <param name="generator">platform generator</param>
        </member>
        <member name="E:Eto.Forms.EnumComboBox`1.AddValue">
            <summary>
            Event to handle when a value of the enumeration is added to the combo box
            </summary>
        </member>
        <member name="P:Eto.Forms.EnumComboBox`1.SelectedValue">
            <summary>
            Gets or sets the currently selected enumeration value
            </summary>
        </member>
        <member name="T:Eto.BindingCollection">
            <summary>
            Collection of bindings
            </summary>
        </member>
        <member name="M:Eto.BindingCollection.Unbind">
            <summary>
            Unbinds all bindings in the collection
            </summary>
            <remarks>
            Unbinding is used to remove all event handlers on objects so they can be garbage collected.
            </remarks>
        </member>
        <member name="M:Eto.BindingCollection.Update">
            <summary>
            Updates all bindings manually
            </summary>
            <remarks>
            Bindings can automatically update if enabled and there are sufficient property changed event(s),
            However in some cases you will want to update the bindings manually, for example if you want to save
            the data on the form, it would validate first, then update the bound object(s) with the updated values.
            </remarks>
        </member>
        <member name="T:Eto.BindingChangingEventArgs">
            <summary>
            Arguments for when a binding's value is changing
            </summary>
            <remarks>
            When handling the event, one could cancel setting the new value by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property to false.
            </remarks>
        </member>
        <member name="M:Eto.BindingChangingEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the BindingChangingEventArgs
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Eto.BindingChangingEventArgs.Value">
            <summary>
            Proposed value to set to the binding
            </summary>
        </member>
        <member name="T:Eto.BindingChangedEventArgs">
            <summary>
            Arguments to handle when a binding value has changed
            </summary>
        </member>
        <member name="M:Eto.BindingChangedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the BindingChangedEventArgs
            </summary>
            <param name="value">value that the binding was set to</param>
        </member>
        <member name="P:Eto.BindingChangedEventArgs.Value">
            <summary>
            Gets the value that was set to the binding
            </summary>
        </member>
        <member name="T:Eto.PropertyBinding">
            <summary>
            Indirect binding to get/set values using a property of a specified object
            </summary>
            <remarks>
            This is used when you are binding to a particular property of an object.
            
            This can be used to get/set values from any object.  If you want to bind to a particular object
            directly, use the <see cref="T:Eto.ObjectBinding"/> with this class as its inner binding.
            </remarks>
        </member>
        <member name="M:Eto.PropertyBinding.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the PropertyBinding with the specified property
            </summary>
            <param name="property">Property to use to get/set values for this binding</param>
            <param name="ignoreCase">True to ignore case for the property, false to be case sensitive</param>
        </member>
        <member name="M:Eto.PropertyBinding.InternalGetValue(System.Object)">
            <summary>
            Implements the logic to get the value from the specified object
            </summary>
            <param name="dataItem">object to get the value from</param>
            <returns>value of the property from the specified dataItem object</returns>
        </member>
        <member name="M:Eto.PropertyBinding.InternalSetValue(System.Object,System.Object)">
            <summary>
            Implements the logic to set the value on the specified object
            </summary>
            <param name="dataItem">object to set the value to</param>
            <param name="value">value to set to the property of the specified dataItem object</param>
        </member>
        <member name="M:Eto.PropertyBinding.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Wires an event handler to fire when the property of the dataItem is changed
            </summary>
            <param name="dataItem">object to detect changes on</param>
            <param name="handler">handler to fire when the property changes on the specified dataItem</param>
            <returns>binding reference used to track the event hookup, to pass to <see cref="M:Eto.PropertyBinding.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> when removing the handler</returns>
        </member>
        <member name="M:Eto.PropertyBinding.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Removes the handler for the specified reference from <see cref="M:Eto.PropertyBinding.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/>
            </summary>
            <param name="bindingReference">Reference from the call to <see cref="M:Eto.PropertyBinding.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/></param>
            <param name="handler">Same handler that was set up during the <see cref="M:Eto.PropertyBinding.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> call</param>
        </member>
        <member name="P:Eto.PropertyBinding.Property">
            <summary>
            Gets or sets the property in which to get/set values from for this binding
            </summary>
        </member>
        <member name="P:Eto.PropertyBinding.IgnoreCase">
            <summary>
            Gets or sets whether the <see cref="P:Eto.PropertyBinding.Property"/> specified is case-sensitive or not
            </summary>
        </member>
        <member name="T:Eto.DirectBinding">
            <summary>
            Abstraction to get/set values from a provided object
            </summary>
            <remarks>
            This binding provides a way to get/set values of an object that is provided by the binding,
            and not passed in.
            
            This differs from the <see cref="T:Eto.IndirectBinding"/>, which requires that the caller pass in the
            object to get/set the value from/to.
            </remarks>
        </member>
        <member name="F:Eto.DirectBinding.DataValueChangedEvent">
            <summary>
            Identifier for the <see cref="E:Eto.DirectBinding.DataValueChanged"/> event
            </summary>
        </member>
        <member name="M:Eto.DirectBinding.OnDataValueChanged(System.EventArgs)">
            <summary>
            Handles the <see cref="E:Eto.DirectBinding.DataValueChanged"/> event
            </summary>
            <remarks>
            Implementors of this class should call this method when the value changes
            on the bound object. Make sure to also override the <see cref="M:Eto.Binding.HandleEvent(System.String)"/> 
            and <see cref="M:Eto.Binding.RemoveEvent(System.String)"/> methods to hook up/remove any event bindings 
            you need on the bound object.
            </remarks>
        </member>
        <member name="E:Eto.DirectBinding.DataValueChanged">
            <summary>
            Event to handle when the value changes on the bound object
            </summary>
        </member>
        <member name="P:Eto.DirectBinding.DataValue">
            <summary>
            Gets or sets the value of this binding
            </summary>
        </member>
        <member name="T:Eto.ObjectBinding">
            <summary>
            Binding for a particular object to get/set values from/to
            </summary>
            <remarks>
            This binding provides a way to get/set values for a particular object.  This uses
            a <see cref="T:Eto.IndirectBinding"/> as its logic to actually retrieve/set the values.
            
            This acts as a bridge between the <see cref="T:Eto.IndirectBinding"/> and <see cref="T:Eto.DirectBinding"/>
            so that you can utilize the <see cref="E:Eto.DirectBinding.DataValueChanged"/> method.
            
            Typically, one would use the <see cref="T:Eto.PropertyBinding"/>, or the <see cref="M:Eto.ObjectBinding.#ctor(System.Object,System.String)"/>
            constructor to hook up this binding to a particular property of the specified object
            </remarks>
        </member>
        <member name="M:Eto.ObjectBinding.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the ObjectBinding with the specified object and property for a <see cref="T:Eto.PropertyBinding"/>
            </summary>
            <remarks>
            This is a shortcut to set up the binding to get/set values from a particular property of the specified object
            </remarks>
            <param name="dataItem">object to get/set values from</param>
            <param name="property">property of the dataItem to get/set values</param>
        </member>
        <member name="M:Eto.ObjectBinding.#ctor(System.Object,Eto.IndirectBinding)">
            <summary>
            Initializes a new instance of the ObjectBinding with the specified object and binding to get/set values with
            </summary>
            <param name="dataItem">object to get/set values from</param>
            <param name="innerBinding">binding to use to get/set the values from the dataItem</param>
        </member>
        <member name="M:Eto.ObjectBinding.HandleEvent(System.String)">
            <summary>
            Hooks up the late bound events for this object
            </summary>
        </member>
        <member name="M:Eto.ObjectBinding.RemoveEvent(System.String)">
            <summary>
            Removes the late bound events for this object
            </summary>
        </member>
        <member name="M:Eto.ObjectBinding.Unbind">
            <summary>
            Unbinds this binding
            </summary>
        </member>
        <member name="P:Eto.ObjectBinding.InnerBinding">
            <summary>
            Gets the binding used to get/set the values from the <see cref="P:Eto.ObjectBinding.DataItem"/>
            </summary>
        </member>
        <member name="P:Eto.ObjectBinding.DataItem">
            <summary>
            Gets the object to get/set the values using the <see cref="P:Eto.ObjectBinding.InnerBinding"/>
            </summary>
        </member>
        <member name="P:Eto.ObjectBinding.DataValue">
            <summary>
            Gets or sets the value of this binding on the bound object
            </summary>
            <remarks>
            This uses the <see cref="P:Eto.ObjectBinding.InnerBinding"/> on the <see cref="P:Eto.ObjectBinding.DataItem"/> to get/set the value
            </remarks>
        </member>
        <member name="T:Eto.DualBindingMode">
            <summary>
            Mode of the <see cref="T:Eto.DualBinding"/>
            </summary>
            <remarks>
            This specifies what direction the updates of each of the properties are automatically handled.
            Only properties that have a Changed event, or objects that implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            will handle automatically updating the binding.
            </remarks>
        </member>
        <member name="F:Eto.DualBindingMode.OneWay">
            <summary>
            Binding will update the destination if the source property is changed
            </summary>
        </member>
        <member name="F:Eto.DualBindingMode.TwoWay">
            <summary>
            Binding will update both the destination or source if updated on either the source or destination, respectively
            </summary>
        </member>
        <member name="F:Eto.DualBindingMode.OneWayToSource">
            <summary>
            Binding will update the source if the destination property is changed
            </summary>
        </member>
        <member name="F:Eto.DualBindingMode.OneTime">
            <summary>
            Binding will only set the destination from the source when initially bound
            </summary>
            <remarks>
            This is ideal when you want to set the values of the destination, then only update the source
            at certain times using the <see cref="M:Eto.DualBinding.Update"/> method.
            </remarks>
        </member>
        <member name="T:Eto.DualBinding">
            <summary>
            Binding for joining two object bindings together
            </summary>
            <remarks>
            The DualBinding is the most useful binding, as it allows you to bind two objects together.
            This differs from the <see cref="T:Eto.IndirectBinding"/> where it only specifies how to get/set the value from a single object.
            
            </remarks>
        </member>
        <member name="M:Eto.DualBinding.#ctor(System.Object,System.String,System.Object,System.String,Eto.DualBindingMode)">
            <summary>
            Initializes a new instance of the DualBinding class with two object property bindings
            </summary>
            <param name="source">Object to retrieve the source value from</param>
            <param name="sourceProperty">Property to retrieve from the source</param>
            <param name="destination">Object to set the destination value to</param>
            <param name="destinationProperty">Property to set on the destination</param>
            <param name="mode">Mode of the binding</param>
        </member>
        <member name="M:Eto.DualBinding.#ctor(Eto.DirectBinding,Eto.DirectBinding,Eto.DualBindingMode)">
            <summary>
            Initializes a new instance of the DualBinding class with two specified bindings
            </summary>
            <param name="source">Binding for retrieving the source value from</param>
            <param name="destination">Binding for setting the destination value to</param>
            <param name="mode">Mode of the binding</param>
        </member>
        <member name="M:Eto.DualBinding.SetSource">
            <summary>
            Sets the source object's property with the value of the destination
            </summary>
        </member>
        <member name="M:Eto.DualBinding.SetDestination">
            <summary>
            Sets the destination object's property with the value of the source
            </summary>
        </member>
        <member name="M:Eto.DualBinding.Update">
            <summary>
            Updates the binding value (sets the source with the value of the destination)
            </summary>
        </member>
        <member name="M:Eto.DualBinding.Unbind">
            <summary>
            Unbinds both the source and destination bindings
            </summary>
        </member>
        <member name="P:Eto.DualBinding.Source">
            <summary>
            Gets the source binding
            </summary>
        </member>
        <member name="P:Eto.DualBinding.Destination">
            <summary>
            Gets the destination binding
            </summary>
        </member>
        <member name="P:Eto.DualBinding.Mode">
            <summary>
            Gets the mode of the binding
            </summary>
        </member>
        <member name="T:Eto.BindingExtensions">
            <summary>
            Extensions for bindings
            </summary>
        </member>
        <member name="M:Eto.BindingExtensions.Bind(Eto.Widget,System.String,System.Object,System.String,Eto.DualBindingMode)">
            <summary>
            Adds a new dual binding between the widget and the specified object
            </summary>
            <param name="widget">Widget to add the binding to</param>
            <param name="widgetPropertyName">Property on the widget to update</param>
            <param name="source">Object to bind to</param>
            <param name="sourcePropertyName">Property on the source object to retrieve/set the value of</param>
            <param name="mode">Mode of the binding</param>
            <returns>A new instance of the DualBinding class that is used to control the binding</returns>
        </member>
        <member name="M:Eto.BindingExtensions.Bind(Eto.Widget,System.String,Eto.DirectBinding,Eto.DualBindingMode)">
            <summary>
            Adds a new dual binding between the widget and the specified source binding
            </summary>
            <param name="widget">Widget to add the binding to</param>
            <param name="widgetPropertyName">Property on the widget to update</param>
            <param name="sourceBinding">Binding to get/set the value to from the widget</param>
            <param name="mode">Mode of the binding</param>
            <returns>A new instance of the DualBinding class that is used to control the binding</returns>
        </member>
        <member name="M:Eto.BindingExtensions.Bind(Eto.InstanceWidget,System.String,System.String,Eto.DualBindingMode)">
            <summary>
            Adds a new binding with the widget and the the widget's current data context 
            </summary>
            <remarks>
            This binds to a property of the <see cref="P:Eto.InstanceWidget.DataContext"/>, which will return the topmost value
            up the control hierarchy.  For example, you can set the DataContext of your form or panel, and then bind to properties
            of that context on any of the child controls such as a text box, etc.
            </remarks>
            <param name="widget">Widget to add the binding to</param>
            <param name="widgetPropertyName">Property on the widget to update</param>
            <param name="dataContextPropertyName">Property on the widget's <see cref="P:Eto.InstanceWidget.DataContext"/> to bind to the widget</param>
            <param name="mode">Mode of the binding</param>
            <returns>A new instance of the DualBinding class that is used to control the binding</returns>
        </member>
        <member name="T:Eto.EtoMemberIdentifier">
            <summary>
            Member identifier for attached properties
            </summary>
        </member>
        <member name="M:Eto.EtoMemberIdentifier.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the EtoMemberIdentifier class
            </summary>
            <param name="declaringType">Type that the property is attached to</param>
            <param name="memberName">Name of the member/property</param>
        </member>
        <member name="T:Eto.HandlerInvalidException">
            <summary>
            Exception thrown when the handler cannot be created either because it was not found or could not be instantiated
            </summary>
        </member>
        <member name="M:Eto.HandlerInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HandlerInvalidException"/> class
            </summary>
        </member>
        <member name="M:Eto.HandlerInvalidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HandlerInvalidException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
        </member>
        <member name="M:Eto.HandlerInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:HandlerInvalidException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
            <param name="inner">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:Eto.HandlerInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:HandlerInvalidException"/> class
            </summary>
            <param name="context">The contextual information about the source or destination.</param>
            <param name="info">The object that holds the serialized object data.</param>
        </member>
    </members>
</doc>
